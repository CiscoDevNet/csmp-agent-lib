/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CsmpTlvs.proto */

#ifndef PROTOBUF_C_CsmpTlvs_2eproto__INCLUDED
#define PROTOBUF_C_CsmpTlvs_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TlvIndex TlvIndex;
typedef struct _DeviceID DeviceID;
typedef struct _SessionID SessionID;
typedef struct _DescriptionRequest DescriptionRequest;
typedef struct _ReportSubscribe ReportSubscribe;
typedef struct _CGMSSettings CGMSSettings;
typedef struct _CGMSStatus CGMSStatus;
typedef struct _CGMSNotification CGMSNotification;
typedef struct _CGMSStats CGMSStats;
typedef struct _GroupAssign GroupAssign;
typedef struct _GroupMatch GroupMatch;
typedef struct _GroupInfo GroupInfo;
typedef struct _SignatureValidity SignatureValidity;
typedef struct _Signature Signature;
typedef struct _SignatureSettings SignatureSettings;
typedef struct _HardwareDesc HardwareDesc;
typedef struct _InterfaceDesc InterfaceDesc;
typedef struct _IPAddress IPAddress;
typedef struct _IPRoute IPRoute;
typedef struct _CurrentTime CurrentTime;
typedef struct _Uptime Uptime;
typedef struct _InterfaceMetrics InterfaceMetrics;
typedef struct _IPRouteRPLMetrics IPRouteRPLMetrics;
typedef struct _WPANStatus WPANStatus;
typedef struct _RPLInstance RPLInstance;
typedef struct _HardwareInfo HardwareInfo;
typedef struct _TransferRequest TransferRequest;
typedef struct _ImageBlock ImageBlock;
typedef struct _LoadRequest LoadRequest;
typedef struct _CancelLoadRequest CancelLoadRequest;
typedef struct _SetBackupRequest SetBackupRequest;
typedef struct _TransferResponse TransferResponse;
typedef struct _LoadResponse LoadResponse;
typedef struct _CancelLoadResponse CancelLoadResponse;
typedef struct _SetBackupResponse SetBackupResponse;
typedef struct _FirmwareImageInfo FirmwareImageInfo;
typedef struct _VendorTlv VendorTlv;


/* --- enums --- */


/* --- messages --- */

/*
 * TLV 1
 */
struct  _TlvIndex
{
  ProtobufCMessage base;
  size_t n_tlvid;
  char **tlvid;
};
#define TLV_INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tlv_index__descriptor) \
    , 0,NULL }


typedef enum {
  DEVICE_ID__TYPE_PRESENT__NOT_SET = 0,
  DEVICE_ID__TYPE_PRESENT_TYPE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEVICE_ID__TYPE_PRESENT)
} DeviceID__TypePresentCase;

typedef enum {
  DEVICE_ID__ID_PRESENT__NOT_SET = 0,
  DEVICE_ID__ID_PRESENT_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEVICE_ID__ID_PRESENT)
} DeviceID__IdPresentCase;

/*
 * TLV 2
 */
struct  _DeviceID
{
  ProtobufCMessage base;
  DeviceID__TypePresentCase type_present_case;
  union {
    uint32_t type;
  };
  DeviceID__IdPresentCase id_present_case;
  union {
    char *id;
  };
};
#define DEVICE_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_id__descriptor) \
    , DEVICE_ID__TYPE_PRESENT__NOT_SET, {0}, DEVICE_ID__ID_PRESENT__NOT_SET, {0} }


typedef enum {
  SESSION_ID__ID_PRESENT__NOT_SET = 0,
  SESSION_ID__ID_PRESENT_ID = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SESSION_ID__ID_PRESENT)
} SessionID__IdPresentCase;

/*
 * TLV 7
 */
struct  _SessionID
{
  ProtobufCMessage base;
  SessionID__IdPresentCase id_present_case;
  union {
    char *id;
  };
};
#define SESSION_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&session_id__descriptor) \
    , SESSION_ID__ID_PRESENT__NOT_SET, {0} }


/*
 * TLV 8
 */
struct  _DescriptionRequest
{
  ProtobufCMessage base;
  size_t n_tlvid;
  char **tlvid;
};
#define DESCRIPTION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&description_request__descriptor) \
    , 0,NULL }


typedef enum {
  REPORT_SUBSCRIBE__INTERVAL_PRESENT__NOT_SET = 0,
  REPORT_SUBSCRIBE__INTERVAL_PRESENT_INTERVAL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REPORT_SUBSCRIBE__INTERVAL_PRESENT)
} ReportSubscribe__IntervalPresentCase;

/*
 * TLV 13
 */
struct  _ReportSubscribe
{
  ProtobufCMessage base;
  size_t n_tlvid;
  char **tlvid;
  ReportSubscribe__IntervalPresentCase interval_present_case;
  union {
    uint32_t interval;
  };
};
#define REPORT_SUBSCRIBE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&report_subscribe__descriptor) \
    , 0,NULL, REPORT_SUBSCRIBE__INTERVAL_PRESENT__NOT_SET, {0} }


typedef enum {
  CGMSSETTINGS__REG_INTERVAL_MIN_PRESENT__NOT_SET = 0,
  CGMSSETTINGS__REG_INTERVAL_MIN_PRESENT_REG_INTERVAL_MIN = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSETTINGS__REG_INTERVAL_MIN_PRESENT)
} CGMSSettings__RegIntervalMinPresentCase;

typedef enum {
  CGMSSETTINGS__REG_INTERVAL_MAX_PRESENT__NOT_SET = 0,
  CGMSSETTINGS__REG_INTERVAL_MAX_PRESENT_REG_INTERVAL_MAX = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSETTINGS__REG_INTERVAL_MAX_PRESENT)
} CGMSSettings__RegIntervalMaxPresentCase;

/*
 * TLV 42
 */
struct  _CGMSSettings
{
  ProtobufCMessage base;
  CGMSSettings__RegIntervalMinPresentCase reg_interval_min_present_case;
  union {
    uint32_t regintervalmin;
  };
  CGMSSettings__RegIntervalMaxPresentCase reg_interval_max_present_case;
  union {
    uint32_t regintervalmax;
  };
};
#define CGMSSETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cgmssettings__descriptor) \
    , CGMSSETTINGS__REG_INTERVAL_MIN_PRESENT__NOT_SET, {0}, CGMSSETTINGS__REG_INTERVAL_MAX_PRESENT__NOT_SET, {0} }


typedef enum {
  CGMSSTATUS__REGISTERED_PRESENT__NOT_SET = 0,
  CGMSSTATUS__REGISTERED_PRESENT_REGISTERED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATUS__REGISTERED_PRESENT)
} CGMSStatus__RegisteredPresentCase;

typedef enum {
  CGMSSTATUS__NMSADDR_PRESENT__NOT_SET = 0,
  CGMSSTATUS__NMSADDR_PRESENT_NMSADDR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATUS__NMSADDR_PRESENT)
} CGMSStatus__NMSAddrPresentCase;

typedef enum {
  CGMSSTATUS__NMSADDR_ORIGIN_PRESENT__NOT_SET = 0,
  CGMSSTATUS__NMSADDR_ORIGIN_PRESENT_NMSADDR_ORIGIN = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATUS__NMSADDR_ORIGIN_PRESENT)
} CGMSStatus__NMSAddrOriginPresentCase;

typedef enum {
  CGMSSTATUS__LAST_REG_PRESENT__NOT_SET = 0,
  CGMSSTATUS__LAST_REG_PRESENT_LAST_REG = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATUS__LAST_REG_PRESENT)
} CGMSStatus__LastRegPresentCase;

typedef enum {
  CGMSSTATUS__LAST_REG_REASON_PRESENT__NOT_SET = 0,
  CGMSSTATUS__LAST_REG_REASON_PRESENT_LAST_REG_REASON = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATUS__LAST_REG_REASON_PRESENT)
} CGMSStatus__LastRegReasonPresentCase;

typedef enum {
  CGMSSTATUS__NEXT_REG_PRESENT__NOT_SET = 0,
  CGMSSTATUS__NEXT_REG_PRESENT_NEXT_REG = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATUS__NEXT_REG_PRESENT)
} CGMSStatus__NextRegPresentCase;

typedef enum {
  CGMSSTATUS__NMSCERT_VALID_PRESENT__NOT_SET = 0,
  CGMSSTATUS__NMSCERT_VALID_PRESENT_NMSCERT_VALID = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATUS__NMSCERT_VALID_PRESENT)
} CGMSStatus__NMSCertValidPresentCase;

/*
 * TLV 43
 */
struct  _CGMSStatus
{
  ProtobufCMessage base;
  CGMSStatus__RegisteredPresentCase registered_present_case;
  union {
    protobuf_c_boolean registered;
  };
  CGMSStatus__NMSAddrPresentCase nmsaddr_present_case;
  union {
    ProtobufCBinaryData nmsaddr;
  };
  CGMSStatus__NMSAddrOriginPresentCase nmsaddr_origin_present_case;
  union {
    uint32_t nmsaddrorigin;
  };
  CGMSStatus__LastRegPresentCase last_reg_present_case;
  union {
    uint32_t lastreg;
  };
  CGMSStatus__LastRegReasonPresentCase last_reg_reason_present_case;
  union {
    uint32_t lastregreason;
  };
  CGMSStatus__NextRegPresentCase next_reg_present_case;
  union {
    uint32_t nextreg;
  };
  CGMSStatus__NMSCertValidPresentCase nmscert_valid_present_case;
  union {
    protobuf_c_boolean nmscertvalid;
  };
};
#define CGMSSTATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cgmsstatus__descriptor) \
    , CGMSSTATUS__REGISTERED_PRESENT__NOT_SET, {0}, CGMSSTATUS__NMSADDR_PRESENT__NOT_SET, {0}, CGMSSTATUS__NMSADDR_ORIGIN_PRESENT__NOT_SET, {0}, CGMSSTATUS__LAST_REG_PRESENT__NOT_SET, {0}, CGMSSTATUS__LAST_REG_REASON_PRESENT__NOT_SET, {0}, CGMSSTATUS__NEXT_REG_PRESENT__NOT_SET, {0}, CGMSSTATUS__NMSCERT_VALID_PRESENT__NOT_SET, {0} }


typedef enum {
  CGMSNOTIFICATION__CODE_PRESENT__NOT_SET = 0,
  CGMSNOTIFICATION__CODE_PRESENT_CODE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSNOTIFICATION__CODE_PRESENT)
} CGMSNotification__CodePresentCase;

/*
 * TLV 44
 */
struct  _CGMSNotification
{
  ProtobufCMessage base;
  size_t n_tlvs;
  uint32_t *tlvs;
  CGMSNotification__CodePresentCase code_present_case;
  union {
    uint32_t code;
  };
};
#define CGMSNOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cgmsnotification__descriptor) \
    , 0,NULL, CGMSNOTIFICATION__CODE_PRESENT__NOT_SET, {0} }


typedef enum {
  CGMSSTATS__SIG_OK_PRESENT__NOT_SET = 0,
  CGMSSTATS__SIG_OK_PRESENT_SIG_OK = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__SIG_OK_PRESENT)
} CGMSStats__SigOkPresentCase;

typedef enum {
  CGMSSTATS__SIG_BAD_AUTH_PRESENT__NOT_SET = 0,
  CGMSSTATS__SIG_BAD_AUTH_PRESENT_SIG_BAD_AUTH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__SIG_BAD_AUTH_PRESENT)
} CGMSStats__SigBadAuthPresentCase;

typedef enum {
  CGMSSTATS__SIG_BAD_VALIDITY_PRESENT__NOT_SET = 0,
  CGMSSTATS__SIG_BAD_VALIDITY_PRESENT_SIG_BAD_VALIDITY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__SIG_BAD_VALIDITY_PRESENT)
} CGMSStats__SigBadValidityPresentCase;

typedef enum {
  CGMSSTATS__SIG_NO_SYNC_PRESENT__NOT_SET = 0,
  CGMSSTATS__SIG_NO_SYNC_PRESENT_SIG_NO_SYNC = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__SIG_NO_SYNC_PRESENT)
} CGMSStats__SigNoSyncPresentCase;

typedef enum {
  CGMSSTATS__REG_SUCCEED_PRESENT__NOT_SET = 0,
  CGMSSTATS__REG_SUCCEED_PRESENT_REG_SUCCEED = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__REG_SUCCEED_PRESENT)
} CGMSStats__RegSucceedPresentCase;

typedef enum {
  CGMSSTATS__REG_ATTEMPTS_PRESENT__NOT_SET = 0,
  CGMSSTATS__REG_ATTEMPTS_PRESENT_REG_ATTEMPTS = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__REG_ATTEMPTS_PRESENT)
} CGMSStats__RegAttemptsPresentCase;

typedef enum {
  CGMSSTATS__REG_HOLDS_PRESENT__NOT_SET = 0,
  CGMSSTATS__REG_HOLDS_PRESENT_REG_HOLDS = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__REG_HOLDS_PRESENT)
} CGMSStats__RegHoldsPresentCase;

typedef enum {
  CGMSSTATS__REG_FAILS_PRESENT__NOT_SET = 0,
  CGMSSTATS__REG_FAILS_PRESENT_REG_FAILS = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__REG_FAILS_PRESENT)
} CGMSStats__RegFailsPresentCase;

typedef enum {
  CGMSSTATS__NMS_ERRORS_PRESENT__NOT_SET = 0,
  CGMSSTATS__NMS_ERRORS_PRESENT_NMS_ERRORS = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CGMSSTATS__NMS_ERRORS_PRESENT)
} CGMSStats__NmsErrorsPresentCase;

/*
 * TLV 45
 */
struct  _CGMSStats
{
  ProtobufCMessage base;
  CGMSStats__SigOkPresentCase sig_ok_present_case;
  union {
    uint32_t sigok;
  };
  CGMSStats__SigBadAuthPresentCase sig_bad_auth_present_case;
  union {
    uint32_t sigbadauth;
  };
  CGMSStats__SigBadValidityPresentCase sig_bad_validity_present_case;
  union {
    uint32_t sigbadvalidity;
  };
  CGMSStats__SigNoSyncPresentCase sig_no_sync_present_case;
  union {
    uint32_t signosync;
  };
  CGMSStats__RegSucceedPresentCase reg_succeed_present_case;
  union {
    uint32_t regsucceed;
  };
  CGMSStats__RegAttemptsPresentCase reg_attempts_present_case;
  union {
    uint32_t regattempts;
  };
  CGMSStats__RegHoldsPresentCase reg_holds_present_case;
  union {
    uint32_t regholds;
  };
  CGMSStats__RegFailsPresentCase reg_fails_present_case;
  union {
    uint32_t regfails;
  };
  CGMSStats__NmsErrorsPresentCase nms_errors_present_case;
  union {
    uint32_t nmserrors;
  };
};
#define CGMSSTATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cgmsstats__descriptor) \
    , CGMSSTATS__SIG_OK_PRESENT__NOT_SET, {0}, CGMSSTATS__SIG_BAD_AUTH_PRESENT__NOT_SET, {0}, CGMSSTATS__SIG_BAD_VALIDITY_PRESENT__NOT_SET, {0}, CGMSSTATS__SIG_NO_SYNC_PRESENT__NOT_SET, {0}, CGMSSTATS__REG_SUCCEED_PRESENT__NOT_SET, {0}, CGMSSTATS__REG_ATTEMPTS_PRESENT__NOT_SET, {0}, CGMSSTATS__REG_HOLDS_PRESENT__NOT_SET, {0}, CGMSSTATS__REG_FAILS_PRESENT__NOT_SET, {0}, CGMSSTATS__NMS_ERRORS_PRESENT__NOT_SET, {0} }


typedef enum {
  GROUP_ASSIGN__TYPE_PRESENT__NOT_SET = 0,
  GROUP_ASSIGN__TYPE_PRESENT_TYPE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_ASSIGN__TYPE_PRESENT)
} GroupAssign__TypePresentCase;

typedef enum {
  GROUP_ASSIGN__ID_PRESENT__NOT_SET = 0,
  GROUP_ASSIGN__ID_PRESENT_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_ASSIGN__ID_PRESENT)
} GroupAssign__IdPresentCase;

/*
 * TLV 55
 */
struct  _GroupAssign
{
  ProtobufCMessage base;
  GroupAssign__TypePresentCase type_present_case;
  union {
    uint32_t type;
  };
  GroupAssign__IdPresentCase id_present_case;
  union {
    uint32_t id;
  };
};
#define GROUP_ASSIGN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_assign__descriptor) \
    , GROUP_ASSIGN__TYPE_PRESENT__NOT_SET, {0}, GROUP_ASSIGN__ID_PRESENT__NOT_SET, {0} }


typedef enum {
  GROUP_MATCH__TYPE_PRESENT__NOT_SET = 0,
  GROUP_MATCH__TYPE_PRESENT_TYPE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_MATCH__TYPE_PRESENT)
} GroupMatch__TypePresentCase;

typedef enum {
  GROUP_MATCH__ID_PRESENT__NOT_SET = 0,
  GROUP_MATCH__ID_PRESENT_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_MATCH__ID_PRESENT)
} GroupMatch__IdPresentCase;

/*
 * TLV 57
 */
struct  _GroupMatch
{
  ProtobufCMessage base;
  GroupMatch__TypePresentCase type_present_case;
  union {
    uint32_t type;
  };
  GroupMatch__IdPresentCase id_present_case;
  union {
    uint32_t id;
  };
};
#define GROUP_MATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_match__descriptor) \
    , GROUP_MATCH__TYPE_PRESENT__NOT_SET, {0}, GROUP_MATCH__ID_PRESENT__NOT_SET, {0} }


typedef enum {
  GROUP_INFO__TYPE_PRESENT__NOT_SET = 0,
  GROUP_INFO__TYPE_PRESENT_TYPE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_INFO__TYPE_PRESENT)
} GroupInfo__TypePresentCase;

typedef enum {
  GROUP_INFO__ID_PRESENT__NOT_SET = 0,
  GROUP_INFO__ID_PRESENT_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_INFO__ID_PRESENT)
} GroupInfo__IdPresentCase;

/*
 * TLV 58
 */
struct  _GroupInfo
{
  ProtobufCMessage base;
  GroupInfo__TypePresentCase type_present_case;
  union {
    uint32_t type;
  };
  GroupInfo__IdPresentCase id_present_case;
  union {
    uint32_t id;
  };
};
#define GROUP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_info__descriptor) \
    , GROUP_INFO__TYPE_PRESENT__NOT_SET, {0}, GROUP_INFO__ID_PRESENT__NOT_SET, {0} }


typedef enum {
  SIGNATURE_VALIDITY__NOT_BEFORE_PRESENT__NOT_SET = 0,
  SIGNATURE_VALIDITY__NOT_BEFORE_PRESENT_NOT_BEFORE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_VALIDITY__NOT_BEFORE_PRESENT)
} SignatureValidity__NotBeforePresentCase;

typedef enum {
  SIGNATURE_VALIDITY__NOT_AFTER_PRESENT__NOT_SET = 0,
  SIGNATURE_VALIDITY__NOT_AFTER_PRESENT_NOT_AFTER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_VALIDITY__NOT_AFTER_PRESENT)
} SignatureValidity__NotAfterPresentCase;

/*
 * TLV 76
 */
struct  _SignatureValidity
{
  ProtobufCMessage base;
  SignatureValidity__NotBeforePresentCase not_before_present_case;
  union {
    uint32_t notbefore;
  };
  SignatureValidity__NotAfterPresentCase not_after_present_case;
  union {
    uint32_t notafter;
  };
};
#define SIGNATURE_VALIDITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&signature_validity__descriptor) \
    , SIGNATURE_VALIDITY__NOT_BEFORE_PRESENT__NOT_SET, {0}, SIGNATURE_VALIDITY__NOT_AFTER_PRESENT__NOT_SET, {0} }


typedef enum {
  SIGNATURE__VALUE_PRESENT__NOT_SET = 0,
  SIGNATURE__VALUE_PRESENT_VALUE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE__VALUE_PRESENT)
} Signature__ValuePresentCase;

/*
 * TLV 77
 */
struct  _Signature
{
  ProtobufCMessage base;
  Signature__ValuePresentCase value_present_case;
  union {
    ProtobufCBinaryData value;
  };
};
#define SIGNATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&signature__descriptor) \
    , SIGNATURE__VALUE_PRESENT__NOT_SET, {0} }


typedef enum {
  SIGNATURE_SETTINGS__REQ_SIGNED_POST_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_SIGNED_POST_PRESENT_REQ_SIGNED_POST = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_SIGNED_POST_PRESENT)
} SignatureSettings__ReqSignedPostPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__REQ_VALID_CHECK_POST_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_VALID_CHECK_POST_PRESENT_REQ_VALID_CHECK_POST = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_VALID_CHECK_POST_PRESENT)
} SignatureSettings__ReqValidCheckPostPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__REQ_TIME_SYNC_POST_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_TIME_SYNC_POST_PRESENT_REQ_TIME_SYNC_POST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_TIME_SYNC_POST_PRESENT)
} SignatureSettings__ReqTimeSyncPostPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__REQ_SEC_LOCAL_POST_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_SEC_LOCAL_POST_PRESENT_REQ_SEC_LOCAL_POST = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_SEC_LOCAL_POST_PRESENT)
} SignatureSettings__ReqSecLocalPostPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__REQ_SIGNED_RESP_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_SIGNED_RESP_PRESENT_REQ_SIGNED_RESP = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_SIGNED_RESP_PRESENT)
} SignatureSettings__ReqSignedRespPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__REQ_VALID_CHECK_RESP_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_VALID_CHECK_RESP_PRESENT_REQ_VALID_CHECK_RESP = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_VALID_CHECK_RESP_PRESENT)
} SignatureSettings__ReqValidCheckRespPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__REQ_TIME_SYNC_RESP_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_TIME_SYNC_RESP_PRESENT_REQ_TIME_SYNC_RESP = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_TIME_SYNC_RESP_PRESENT)
} SignatureSettings__ReqTimeSyncRespPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__REQ_SEC_LOCAL_RESP_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__REQ_SEC_LOCAL_RESP_PRESENT_REQ_SEC_LOCAL_RESP = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__REQ_SEC_LOCAL_RESP_PRESENT)
} SignatureSettings__ReqSecLocalRespPresentCase;

typedef enum {
  SIGNATURE_SETTINGS__CERT_PRESENT__NOT_SET = 0,
  SIGNATURE_SETTINGS__CERT_PRESENT_CERT = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SIGNATURE_SETTINGS__CERT_PRESENT)
} SignatureSettings__CertPresentCase;

/*
 * TLV 79
 */
struct  _SignatureSettings
{
  ProtobufCMessage base;
  SignatureSettings__ReqSignedPostPresentCase req_signed_post_present_case;
  union {
    protobuf_c_boolean reqsignedpost;
  };
  SignatureSettings__ReqValidCheckPostPresentCase req_valid_check_post_present_case;
  union {
    protobuf_c_boolean reqvalidcheckpost;
  };
  SignatureSettings__ReqTimeSyncPostPresentCase req_time_sync_post_present_case;
  union {
    protobuf_c_boolean reqtimesyncpost;
  };
  SignatureSettings__ReqSecLocalPostPresentCase req_sec_local_post_present_case;
  union {
    protobuf_c_boolean reqseclocalpost;
  };
  SignatureSettings__ReqSignedRespPresentCase req_signed_resp_present_case;
  union {
    protobuf_c_boolean reqsignedresp;
  };
  SignatureSettings__ReqValidCheckRespPresentCase req_valid_check_resp_present_case;
  union {
    protobuf_c_boolean reqvalidcheckresp;
  };
  SignatureSettings__ReqTimeSyncRespPresentCase req_time_sync_resp_present_case;
  union {
    protobuf_c_boolean reqtimesyncresp;
  };
  SignatureSettings__ReqSecLocalRespPresentCase req_sec_local_resp_present_case;
  union {
    protobuf_c_boolean reqseclocalresp;
  };
  SignatureSettings__CertPresentCase cert_present_case;
  union {
    ProtobufCBinaryData cert;
  };
};
#define SIGNATURE_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&signature_settings__descriptor) \
    , SIGNATURE_SETTINGS__REQ_SIGNED_POST_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__REQ_VALID_CHECK_POST_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__REQ_TIME_SYNC_POST_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__REQ_SEC_LOCAL_POST_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__REQ_SIGNED_RESP_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__REQ_VALID_CHECK_RESP_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__REQ_TIME_SYNC_RESP_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__REQ_SEC_LOCAL_RESP_PRESENT__NOT_SET, {0}, SIGNATURE_SETTINGS__CERT_PRESENT__NOT_SET, {0} }


typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_INDEX_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_INDEX_PRESENT_ENT_PHYSICAL_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_INDEX_PRESENT)
} HardwareDesc__EntPhysicalIndexPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_DESCR_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_DESCR_PRESENT_ENT_PHYSICAL_DESCR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_DESCR_PRESENT)
} HardwareDesc__EntPhysicalDescrPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_VENDOR_TYPE_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_VENDOR_TYPE_PRESENT_ENT_PHYSICAL_VENDOR_TYPE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_VENDOR_TYPE_PRESENT)
} HardwareDesc__EntPhysicalVendorTypePresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_CONTAINED_IN_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_CONTAINED_IN_PRESENT_ENT_PHYSICAL_CONTAINED_IN = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_CONTAINED_IN_PRESENT)
} HardwareDesc__EntPhysicalContainedInPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_CLASS_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_CLASS_PRESENT_ENT_PHYSICAL_CLASS = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_CLASS_PRESENT)
} HardwareDesc__EntPhysicalClassPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_PARENT_REL_POS_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_PARENT_REL_POS_PRESENT_ENT_PHYSICAL_PARENT_REL_POS = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_PARENT_REL_POS_PRESENT)
} HardwareDesc__EntPhysicalParentRelPosPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_NAME_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_NAME_PRESENT_ENT_PHYSICAL_NAME = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_NAME_PRESENT)
} HardwareDesc__EntPhysicalNamePresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_HARDWARE_REV_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_HARDWARE_REV_PRESENT_ENT_PHYSICAL_HARDWARE_REV = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_HARDWARE_REV_PRESENT)
} HardwareDesc__EntPhysicalHardwareRevPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_FIRMWARE_REV_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_FIRMWARE_REV_PRESENT_ENT_PHYSICAL_FIRMWARE_REV = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_FIRMWARE_REV_PRESENT)
} HardwareDesc__EntPhysicalFirmwareRevPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_SOFTWARE_REV_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_SOFTWARE_REV_PRESENT_ENT_PHYSICAL_SOFTWARE_REV = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_SOFTWARE_REV_PRESENT)
} HardwareDesc__EntPhysicalSoftwareRevPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_SERIAL_NUM_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_SERIAL_NUM_PRESENT_ENT_PHYSICAL_SERIAL_NUM = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_SERIAL_NUM_PRESENT)
} HardwareDesc__EntPhysicalSerialNumPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_MFG_NAME_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_MFG_NAME_PRESENT_ENT_PHYSICAL_MFG_NAME = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_MFG_NAME_PRESENT)
} HardwareDesc__EntPhysicalMfgNamePresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_MODEL_NAME_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_MODEL_NAME_PRESENT_ENT_PHYSICAL_MODEL_NAME = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_MODEL_NAME_PRESENT)
} HardwareDesc__EntPhysicalModelNamePresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_ASSET_ID_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_ASSET_ID_PRESENT_ENT_PHYSICAL_ASSET_ID = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_ASSET_ID_PRESENT)
} HardwareDesc__EntPhysicalAssetIDPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_MFG_DATE_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_MFG_DATE_PRESENT_ENT_PHYSICAL_MFG_DATE = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_MFG_DATE_PRESENT)
} HardwareDesc__EntPhysicalMfgDatePresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_URIS_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_URIS_PRESENT_ENT_PHYSICAL_URIS = 16
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_URIS_PRESENT)
} HardwareDesc__EntPhysicalURIsPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_FUNCTION_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_FUNCTION_PRESENT_ENT_PHYSICAL_FUNCTION = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_FUNCTION_PRESENT)
} HardwareDesc__EntPhysicalFunctionPresentCase;

typedef enum {
  HARDWARE_DESC__ENT_PHYSICAL_OUI_PRESENT__NOT_SET = 0,
  HARDWARE_DESC__ENT_PHYSICAL_OUI_PRESENT_ENT_PHYSICAL_OUI = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_DESC__ENT_PHYSICAL_OUI_PRESENT)
} HardwareDesc__EntPhysicalOUIPresentCase;

/*
 * TLV 11
 */
struct  _HardwareDesc
{
  ProtobufCMessage base;
  HardwareDesc__EntPhysicalIndexPresentCase ent_physical_index_present_case;
  union {
    int32_t entphysicalindex;
  };
  HardwareDesc__EntPhysicalDescrPresentCase ent_physical_descr_present_case;
  union {
    char *entphysicaldescr;
  };
  HardwareDesc__EntPhysicalVendorTypePresentCase ent_physical_vendor_type_present_case;
  union {
    ProtobufCBinaryData entphysicalvendortype;
  };
  HardwareDesc__EntPhysicalContainedInPresentCase ent_physical_contained_in_present_case;
  union {
    int32_t entphysicalcontainedin;
  };
  HardwareDesc__EntPhysicalClassPresentCase ent_physical_class_present_case;
  union {
    int32_t entphysicalclass;
  };
  HardwareDesc__EntPhysicalParentRelPosPresentCase ent_physical_parent_rel_pos_present_case;
  union {
    int32_t entphysicalparentrelpos;
  };
  HardwareDesc__EntPhysicalNamePresentCase ent_physical_name_present_case;
  union {
    char *entphysicalname;
  };
  HardwareDesc__EntPhysicalHardwareRevPresentCase ent_physical_hardware_rev_present_case;
  union {
    char *entphysicalhardwarerev;
  };
  HardwareDesc__EntPhysicalFirmwareRevPresentCase ent_physical_firmware_rev_present_case;
  union {
    char *entphysicalfirmwarerev;
  };
  HardwareDesc__EntPhysicalSoftwareRevPresentCase ent_physical_software_rev_present_case;
  union {
    char *entphysicalsoftwarerev;
  };
  HardwareDesc__EntPhysicalSerialNumPresentCase ent_physical_serial_num_present_case;
  union {
    char *entphysicalserialnum;
  };
  HardwareDesc__EntPhysicalMfgNamePresentCase ent_physical_mfg_name_present_case;
  union {
    char *entphysicalmfgname;
  };
  HardwareDesc__EntPhysicalModelNamePresentCase ent_physical_model_name_present_case;
  union {
    char *entphysicalmodelname;
  };
  HardwareDesc__EntPhysicalAssetIDPresentCase ent_physical_asset_id_present_case;
  union {
    char *entphysicalassetid;
  };
  HardwareDesc__EntPhysicalMfgDatePresentCase ent_physical_mfg_date_present_case;
  union {
    uint32_t entphysicalmfgdate;
  };
  HardwareDesc__EntPhysicalURIsPresentCase ent_physical_uris_present_case;
  union {
    char *entphysicaluris;
  };
  HardwareDesc__EntPhysicalFunctionPresentCase ent_physical_function_present_case;
  union {
    uint32_t entphysicalfunction;
  };
  HardwareDesc__EntPhysicalOUIPresentCase ent_physical_oui_present_case;
  union {
    char *entphysicaloui;
  };
};
#define HARDWARE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hardware_desc__descriptor) \
    , HARDWARE_DESC__ENT_PHYSICAL_INDEX_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_DESCR_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_VENDOR_TYPE_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_CONTAINED_IN_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_CLASS_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_PARENT_REL_POS_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_NAME_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_HARDWARE_REV_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_FIRMWARE_REV_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_SOFTWARE_REV_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_SERIAL_NUM_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_MFG_NAME_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_MODEL_NAME_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_ASSET_ID_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_MFG_DATE_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_URIS_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_FUNCTION_PRESENT__NOT_SET, {0}, HARDWARE_DESC__ENT_PHYSICAL_OUI_PRESENT__NOT_SET, {0} }


typedef enum {
  INTERFACE_DESC__IF_INDEX_PRESENT__NOT_SET = 0,
  INTERFACE_DESC__IF_INDEX_PRESENT_IF_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_DESC__IF_INDEX_PRESENT)
} InterfaceDesc__IfIndexPresentCase;

typedef enum {
  INTERFACE_DESC__IF_NAME_PRESENT__NOT_SET = 0,
  INTERFACE_DESC__IF_NAME_PRESENT_IF_NAME = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_DESC__IF_NAME_PRESENT)
} InterfaceDesc__IfNamePresentCase;

typedef enum {
  INTERFACE_DESC__IF_DESCR_PRESENT__NOT_SET = 0,
  INTERFACE_DESC__IF_DESCR_PRESENT_IF_DESCR = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_DESC__IF_DESCR_PRESENT)
} InterfaceDesc__IfDescrPresentCase;

typedef enum {
  INTERFACE_DESC__IF_TYPE_PRESENT__NOT_SET = 0,
  INTERFACE_DESC__IF_TYPE_PRESENT_IF_TYPE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_DESC__IF_TYPE_PRESENT)
} InterfaceDesc__IfTypePresentCase;

typedef enum {
  INTERFACE_DESC__IF_MTU_PRESENT__NOT_SET = 0,
  INTERFACE_DESC__IF_MTU_PRESENT_IF_MTU = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_DESC__IF_MTU_PRESENT)
} InterfaceDesc__IfMtuPresentCase;

typedef enum {
  INTERFACE_DESC__IF_PHYS_ADDRESS_PRESENT__NOT_SET = 0,
  INTERFACE_DESC__IF_PHYS_ADDRESS_PRESENT_IF_PHYS_ADDRESS = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_DESC__IF_PHYS_ADDRESS_PRESENT)
} InterfaceDesc__IfPhysAddressPresentCase;

/*
 * TLV 12
 */
struct  _InterfaceDesc
{
  ProtobufCMessage base;
  InterfaceDesc__IfIndexPresentCase if_index_present_case;
  union {
    int32_t ifindex;
  };
  InterfaceDesc__IfNamePresentCase if_name_present_case;
  union {
    char *ifname;
  };
  InterfaceDesc__IfDescrPresentCase if_descr_present_case;
  union {
    char *ifdescr;
  };
  InterfaceDesc__IfTypePresentCase if_type_present_case;
  union {
    int32_t iftype;
  };
  InterfaceDesc__IfMtuPresentCase if_mtu_present_case;
  union {
    int32_t ifmtu;
  };
  InterfaceDesc__IfPhysAddressPresentCase if_phys_address_present_case;
  union {
    ProtobufCBinaryData ifphysaddress;
  };
};
#define INTERFACE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interface_desc__descriptor) \
    , INTERFACE_DESC__IF_INDEX_PRESENT__NOT_SET, {0}, INTERFACE_DESC__IF_NAME_PRESENT__NOT_SET, {0}, INTERFACE_DESC__IF_DESCR_PRESENT__NOT_SET, {0}, INTERFACE_DESC__IF_TYPE_PRESENT__NOT_SET, {0}, INTERFACE_DESC__IF_MTU_PRESENT__NOT_SET, {0}, INTERFACE_DESC__IF_PHYS_ADDRESS_PRESENT__NOT_SET, {0} }


typedef enum {
  IPADDRESS__IP_ADDRESS_INDEX_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_INDEX_PRESENT_IP_ADDRESS_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_INDEX_PRESENT)
} IPAddress__IpAddressIndexPresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_ADDR_TYPE_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_ADDR_TYPE_PRESENT_IP_ADDRESS_ADDR_TYPE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_ADDR_TYPE_PRESENT)
} IPAddress__IpAddressAddrTypePresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_ADDR_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_ADDR_PRESENT_IP_ADDRESS_ADDR = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_ADDR_PRESENT)
} IPAddress__IpAddressAddrPresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_IF_INDEX_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_IF_INDEX_PRESENT_IP_ADDRESS_IF_INDEX = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_IF_INDEX_PRESENT)
} IPAddress__IpAddressIfIndexPresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_TYPE_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_TYPE_PRESENT_IP_ADDRESS_TYPE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_TYPE_PRESENT)
} IPAddress__IpAddressTypePresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_ORIGIN_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_ORIGIN_PRESENT_IP_ADDRESS_ORIGIN = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_ORIGIN_PRESENT)
} IPAddress__IpAddressOriginPresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_STATUS_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_STATUS_PRESENT_IP_ADDRESS_STATUS = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_STATUS_PRESENT)
} IPAddress__IpAddressStatusPresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_CREATED_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_CREATED_PRESENT_IP_ADDRESS_CREATED = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_CREATED_PRESENT)
} IPAddress__IpAddressCreatedPresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_LAST_CHANGED_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_LAST_CHANGED_PRESENT_IP_ADDRESS_LAST_CHANGED = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_LAST_CHANGED_PRESENT)
} IPAddress__IpAddressLastChangedPresentCase;

typedef enum {
  IPADDRESS__IP_ADDRESS_PFX_LEN_PRESENT__NOT_SET = 0,
  IPADDRESS__IP_ADDRESS_PFX_LEN_PRESENT_IP_ADDRESS_PFX_LEN = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPADDRESS__IP_ADDRESS_PFX_LEN_PRESENT)
} IPAddress__IpAddressPfxLenPresentCase;

/*
 * TLV 16
 */
struct  _IPAddress
{
  ProtobufCMessage base;
  IPAddress__IpAddressIndexPresentCase ip_address_index_present_case;
  union {
    int32_t ipaddressindex;
  };
  IPAddress__IpAddressAddrTypePresentCase ip_address_addr_type_present_case;
  union {
    uint32_t ipaddressaddrtype;
  };
  IPAddress__IpAddressAddrPresentCase ip_address_addr_present_case;
  union {
    ProtobufCBinaryData ipaddressaddr;
  };
  IPAddress__IpAddressIfIndexPresentCase ip_address_if_index_present_case;
  union {
    int32_t ipaddressifindex;
  };
  IPAddress__IpAddressTypePresentCase ip_address_type_present_case;
  union {
    uint32_t ipaddresstype;
  };
  IPAddress__IpAddressOriginPresentCase ip_address_origin_present_case;
  union {
    uint32_t ipaddressorigin;
  };
  IPAddress__IpAddressStatusPresentCase ip_address_status_present_case;
  union {
    uint32_t ipaddressstatus;
  };
  IPAddress__IpAddressCreatedPresentCase ip_address_created_present_case;
  union {
    uint32_t ipaddresscreated;
  };
  IPAddress__IpAddressLastChangedPresentCase ip_address_last_changed_present_case;
  union {
    uint32_t ipaddresslastchanged;
  };
  IPAddress__IpAddressPfxLenPresentCase ip_address_pfx_len_present_case;
  union {
    uint32_t ipaddresspfxlen;
  };
};
#define IPADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipaddress__descriptor) \
    , IPADDRESS__IP_ADDRESS_INDEX_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_ADDR_TYPE_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_ADDR_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_IF_INDEX_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_TYPE_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_ORIGIN_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_STATUS_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_CREATED_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_LAST_CHANGED_PRESENT__NOT_SET, {0}, IPADDRESS__IP_ADDRESS_PFX_LEN_PRESENT__NOT_SET, {0} }


typedef enum {
  IPROUTE__INET_CIDR_ROUTE_INDEX_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_INDEX_PRESENT_INET_CIDR_ROUTE_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_INDEX_PRESENT)
} IPRoute__InetCidrRouteIndexPresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_DEST_TYPE_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_DEST_TYPE_PRESENT_INET_CIDR_ROUTE_DEST_TYPE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_DEST_TYPE_PRESENT)
} IPRoute__InetCidrRouteDestTypePresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_DEST_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_DEST_PRESENT_INET_CIDR_ROUTE_DEST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_DEST_PRESENT)
} IPRoute__InetCidrRouteDestPresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_PFX_LEN_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_PFX_LEN_PRESENT_INET_CIDR_ROUTE_PFX_LEN = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_PFX_LEN_PRESENT)
} IPRoute__InetCidrRoutePfxLenPresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_TYPE_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_TYPE_PRESENT_INET_CIDR_ROUTE_NEXT_HOP_TYPE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_TYPE_PRESENT)
} IPRoute__InetCidrRouteNextHopTypePresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_PRESENT_INET_CIDR_ROUTE_NEXT_HOP = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_PRESENT)
} IPRoute__InetCidrRouteNextHopPresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_IF_INDEX_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_IF_INDEX_PRESENT_INET_CIDR_ROUTE_IF_INDEX = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_IF_INDEX_PRESENT)
} IPRoute__InetCidrRouteIfIndexPresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_TYPE_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_TYPE_PRESENT_INET_CIDR_ROUTE_TYPE = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_TYPE_PRESENT)
} IPRoute__InetCidrRouteTypePresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_PROTO_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_PROTO_PRESENT_INET_CIDR_ROUTE_PROTO = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_PROTO_PRESENT)
} IPRoute__InetCidrRouteProtoPresentCase;

typedef enum {
  IPROUTE__INET_CIDR_ROUTE_AGE_PRESENT__NOT_SET = 0,
  IPROUTE__INET_CIDR_ROUTE_AGE_PRESENT_INET_CIDR_ROUTE_AGE = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE__INET_CIDR_ROUTE_AGE_PRESENT)
} IPRoute__InetCidrRouteAgePresentCase;

/*
 * TLV 17
 */
struct  _IPRoute
{
  ProtobufCMessage base;
  IPRoute__InetCidrRouteIndexPresentCase inet_cidr_route_index_present_case;
  union {
    int32_t inetcidrrouteindex;
  };
  IPRoute__InetCidrRouteDestTypePresentCase inet_cidr_route_dest_type_present_case;
  union {
    uint32_t inetcidrroutedesttype;
  };
  IPRoute__InetCidrRouteDestPresentCase inet_cidr_route_dest_present_case;
  union {
    ProtobufCBinaryData inetcidrroutedest;
  };
  IPRoute__InetCidrRoutePfxLenPresentCase inet_cidr_route_pfx_len_present_case;
  union {
    uint32_t inetcidrroutepfxlen;
  };
  IPRoute__InetCidrRouteNextHopTypePresentCase inet_cidr_route_next_hop_type_present_case;
  union {
    uint32_t inetcidrroutenexthoptype;
  };
  IPRoute__InetCidrRouteNextHopPresentCase inet_cidr_route_next_hop_present_case;
  union {
    ProtobufCBinaryData inetcidrroutenexthop;
  };
  IPRoute__InetCidrRouteIfIndexPresentCase inet_cidr_route_if_index_present_case;
  union {
    int32_t inetcidrrouteifindex;
  };
  IPRoute__InetCidrRouteTypePresentCase inet_cidr_route_type_present_case;
  union {
    uint32_t inetcidrroutetype;
  };
  IPRoute__InetCidrRouteProtoPresentCase inet_cidr_route_proto_present_case;
  union {
    uint32_t inetcidrrouteproto;
  };
  IPRoute__InetCidrRouteAgePresentCase inet_cidr_route_age_present_case;
  union {
    uint32_t inetcidrrouteage;
  };
};
#define IPROUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iproute__descriptor) \
    , IPROUTE__INET_CIDR_ROUTE_INDEX_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_DEST_TYPE_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_DEST_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_PFX_LEN_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_TYPE_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_NEXT_HOP_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_IF_INDEX_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_TYPE_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_PROTO_PRESENT__NOT_SET, {0}, IPROUTE__INET_CIDR_ROUTE_AGE_PRESENT__NOT_SET, {0} }


typedef enum {
  CURRENT_TIME__POSIX_PRESENT__NOT_SET = 0,
  CURRENT_TIME__POSIX_PRESENT_POSIX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CURRENT_TIME__POSIX_PRESENT)
} CurrentTime__PosixPresentCase;

typedef enum {
  CURRENT_TIME__ISO8601_PRESENT__NOT_SET = 0,
  CURRENT_TIME__ISO8601_PRESENT_ISO8601 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CURRENT_TIME__ISO8601_PRESENT)
} CurrentTime__Iso8601PresentCase;

typedef enum {
  CURRENT_TIME__SOURCE_PRESENT__NOT_SET = 0,
  CURRENT_TIME__SOURCE_PRESENT_SOURCE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CURRENT_TIME__SOURCE_PRESENT)
} CurrentTime__SourcePresentCase;

/*
 * TLV 18
 */
struct  _CurrentTime
{
  ProtobufCMessage base;
  CurrentTime__PosixPresentCase posix_present_case;
  union {
    uint32_t posix;
  };
  CurrentTime__Iso8601PresentCase iso8601_present_case;
  union {
    char *iso8601;
  };
  CurrentTime__SourcePresentCase source_present_case;
  union {
    uint32_t source;
  };
};
#define CURRENT_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&current_time__descriptor) \
    , CURRENT_TIME__POSIX_PRESENT__NOT_SET, {0}, CURRENT_TIME__ISO8601_PRESENT__NOT_SET, {0}, CURRENT_TIME__SOURCE_PRESENT__NOT_SET, {0} }


typedef enum {
  UPTIME__SYS_UP_TIME_PRESENT__NOT_SET = 0,
  UPTIME__SYS_UP_TIME_PRESENT_SYS_UP_TIME = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(UPTIME__SYS_UP_TIME_PRESENT)
} Uptime__SysUpTimePresentCase;

/*
 * TLV 22
 */
struct  _Uptime
{
  ProtobufCMessage base;
  Uptime__SysUpTimePresentCase sys_up_time_present_case;
  union {
    uint32_t sysuptime;
  };
};
#define UPTIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&uptime__descriptor) \
    , UPTIME__SYS_UP_TIME_PRESENT__NOT_SET, {0} }


typedef enum {
  INTERFACE_METRICS__IF_INDEX_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_INDEX_PRESENT_IF_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_INDEX_PRESENT)
} InterfaceMetrics__IfIndexPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_IN_SPEED_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_IN_SPEED_PRESENT_IF_IN_SPEED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_IN_SPEED_PRESENT)
} InterfaceMetrics__IfInSpeedPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_OUT_SPEED_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_OUT_SPEED_PRESENT_IF_OUT_SPEED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_OUT_SPEED_PRESENT)
} InterfaceMetrics__IfOutSpeedPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_ADMIN_STATUS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_ADMIN_STATUS_PRESENT_IF_ADMIN_STATUS = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_ADMIN_STATUS_PRESENT)
} InterfaceMetrics__IfAdminStatusPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_OPER_STATUS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_OPER_STATUS_PRESENT_IF_OPER_STATUS = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_OPER_STATUS_PRESENT)
} InterfaceMetrics__IfOperStatusPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_LAST_CHANGE_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_LAST_CHANGE_PRESENT_IF_LAST_CHANGE = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_LAST_CHANGE_PRESENT)
} InterfaceMetrics__IfLastChangePresentCase;

typedef enum {
  INTERFACE_METRICS__IF_IN_OCTETS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_IN_OCTETS_PRESENT_IF_IN_OCTETS = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_IN_OCTETS_PRESENT)
} InterfaceMetrics__IfInOctetsPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_OUT_OCTETS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_OUT_OCTETS_PRESENT_IF_OUT_OCTETS = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_OUT_OCTETS_PRESENT)
} InterfaceMetrics__IfOutOctetsPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_IN_DISCARDS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_IN_DISCARDS_PRESENT_IF_IN_DISCARDS = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_IN_DISCARDS_PRESENT)
} InterfaceMetrics__IfInDiscardsPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_IN_ERRORS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_IN_ERRORS_PRESENT_IF_IN_ERRORS = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_IN_ERRORS_PRESENT)
} InterfaceMetrics__IfInErrorsPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_OUT_DISCARDS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_OUT_DISCARDS_PRESENT_IF_OUT_DISCARDS = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_OUT_DISCARDS_PRESENT)
} InterfaceMetrics__IfOutDiscardsPresentCase;

typedef enum {
  INTERFACE_METRICS__IF_OUT_ERRORS_PRESENT__NOT_SET = 0,
  INTERFACE_METRICS__IF_OUT_ERRORS_PRESENT_IF_OUT_ERRORS = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERFACE_METRICS__IF_OUT_ERRORS_PRESENT)
} InterfaceMetrics__IfOutErrorsPresentCase;

/*
 * TLV 23
 */
struct  _InterfaceMetrics
{
  ProtobufCMessage base;
  InterfaceMetrics__IfIndexPresentCase if_index_present_case;
  union {
    int32_t ifindex;
  };
  InterfaceMetrics__IfInSpeedPresentCase if_in_speed_present_case;
  union {
    uint32_t ifinspeed;
  };
  InterfaceMetrics__IfOutSpeedPresentCase if_out_speed_present_case;
  union {
    uint32_t ifoutspeed;
  };
  InterfaceMetrics__IfAdminStatusPresentCase if_admin_status_present_case;
  union {
    uint32_t ifadminstatus;
  };
  InterfaceMetrics__IfOperStatusPresentCase if_oper_status_present_case;
  union {
    uint32_t ifoperstatus;
  };
  InterfaceMetrics__IfLastChangePresentCase if_last_change_present_case;
  union {
    uint32_t iflastchange;
  };
  InterfaceMetrics__IfInOctetsPresentCase if_in_octets_present_case;
  union {
    uint32_t ifinoctets;
  };
  InterfaceMetrics__IfOutOctetsPresentCase if_out_octets_present_case;
  union {
    uint32_t ifoutoctets;
  };
  InterfaceMetrics__IfInDiscardsPresentCase if_in_discards_present_case;
  union {
    uint32_t ifindiscards;
  };
  InterfaceMetrics__IfInErrorsPresentCase if_in_errors_present_case;
  union {
    uint32_t ifinerrors;
  };
  InterfaceMetrics__IfOutDiscardsPresentCase if_out_discards_present_case;
  union {
    uint32_t ifoutdiscards;
  };
  InterfaceMetrics__IfOutErrorsPresentCase if_out_errors_present_case;
  union {
    uint32_t ifouterrors;
  };
};
#define INTERFACE_METRICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interface_metrics__descriptor) \
    , INTERFACE_METRICS__IF_INDEX_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_IN_SPEED_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_OUT_SPEED_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_ADMIN_STATUS_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_OPER_STATUS_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_LAST_CHANGE_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_IN_OCTETS_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_OUT_OCTETS_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_IN_DISCARDS_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_IN_ERRORS_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_OUT_DISCARDS_PRESENT__NOT_SET, {0}, INTERFACE_METRICS__IF_OUT_ERRORS_PRESENT__NOT_SET, {0} }


typedef enum {
  IPROUTE_RPLMETRICS__INET_CIDR_ROUTE_INDEX_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__INET_CIDR_ROUTE_INDEX_PRESENT_INET_CIDR_ROUTE_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__INET_CIDR_ROUTE_INDEX_PRESENT)
} IPRouteRPLMetrics__InetCidrRouteIndexPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__INSTANCE_INDEX_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__INSTANCE_INDEX_PRESENT_INSTANCE_INDEX = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__INSTANCE_INDEX_PRESENT)
} IPRouteRPLMetrics__InstanceIndexPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__RANK_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__RANK_PRESENT_RANK = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__RANK_PRESENT)
} IPRouteRPLMetrics__RankPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__HOPS_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__HOPS_PRESENT_HOPS = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__HOPS_PRESENT)
} IPRouteRPLMetrics__HopsPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__PATH_ETX_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__PATH_ETX_PRESENT_PATH_ETX = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__PATH_ETX_PRESENT)
} IPRouteRPLMetrics__PathEtxPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__LINK_ETX_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__LINK_ETX_PRESENT_LINK_ETX = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__LINK_ETX_PRESENT)
} IPRouteRPLMetrics__LinkEtxPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__RSSI_FORWARD_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__RSSI_FORWARD_PRESENT_RSSI_FORWARD = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__RSSI_FORWARD_PRESENT)
} IPRouteRPLMetrics__RssiForwardPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__RSSI_REVERSE_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__RSSI_REVERSE_PRESENT_RSSI_REVERSE = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__RSSI_REVERSE_PRESENT)
} IPRouteRPLMetrics__RssiReversePresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__LQI_FORWARD_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__LQI_FORWARD_PRESENT_LQI_FORWARD = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__LQI_FORWARD_PRESENT)
} IPRouteRPLMetrics__LqiForwardPresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__LQI_REVERSE_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__LQI_REVERSE_PRESENT_LQI_REVERSE = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__LQI_REVERSE_PRESENT)
} IPRouteRPLMetrics__LqiReversePresentCase;

typedef enum {
  IPROUTE_RPLMETRICS__DAG_SIZE_PRESENT__NOT_SET = 0,
  IPROUTE_RPLMETRICS__DAG_SIZE_PRESENT_DAG_SIZE = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPROUTE_RPLMETRICS__DAG_SIZE_PRESENT)
} IPRouteRPLMetrics__DagSizePresentCase;

/*
 * TLV 25
 */
struct  _IPRouteRPLMetrics
{
  ProtobufCMessage base;
  IPRouteRPLMetrics__InetCidrRouteIndexPresentCase inet_cidr_route_index_present_case;
  union {
    /*
     * refers to a particular index in the IPRoute table
     */
    int32_t inetcidrrouteindex;
  };
  IPRouteRPLMetrics__InstanceIndexPresentCase instance_index_present_case;
  union {
    /*
     * Corresponding RPL instance of this route
     */
    int32_t instanceindex;
  };
  IPRouteRPLMetrics__RankPresentCase rank_present_case;
  union {
    /*
     * advertised rank
     */
    int32_t rank;
  };
  IPRouteRPLMetrics__HopsPresentCase hops_present_case;
  union {
    /*
     * not necessary now, but here so we can easily add later once we're propagating hops as a metric
     */
    int32_t hops;
  };
  IPRouteRPLMetrics__PathEtxPresentCase path_etx_present_case;
  union {
    /*
     * advertised path ethx
     */
    int32_t pathetx;
  };
  IPRouteRPLMetrics__LinkEtxPresentCase link_etx_present_case;
  union {
    /*
     * next-hop link ETX
     */
    int32_t linketx;
  };
  IPRouteRPLMetrics__RssiForwardPresentCase rssi_forward_present_case;
  union {
    int32_t rssiforward;
  };
  IPRouteRPLMetrics__RssiReversePresentCase rssi_reverse_present_case;
  union {
    int32_t rssireverse;
  };
  IPRouteRPLMetrics__LqiForwardPresentCase lqi_forward_present_case;
  union {
    int32_t lqiforward;
  };
  IPRouteRPLMetrics__LqiReversePresentCase lqi_reverse_present_case;
  union {
    int32_t lqireverse;
  };
  IPRouteRPLMetrics__DagSizePresentCase dag_size_present_case;
  union {
    uint32_t dagsize;
  };
};
#define IPROUTE_RPLMETRICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iproute_rplmetrics__descriptor) \
    , IPROUTE_RPLMETRICS__INET_CIDR_ROUTE_INDEX_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__INSTANCE_INDEX_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__RANK_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__HOPS_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__PATH_ETX_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__LINK_ETX_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__RSSI_FORWARD_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__RSSI_REVERSE_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__LQI_FORWARD_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__LQI_REVERSE_PRESENT__NOT_SET, {0}, IPROUTE_RPLMETRICS__DAG_SIZE_PRESENT__NOT_SET, {0} }


typedef enum {
  WPANSTATUS__IF_INDEX_PRESENT__NOT_SET = 0,
  WPANSTATUS__IF_INDEX_PRESENT_IF_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__IF_INDEX_PRESENT)
} WPANStatus__IfIndexPresentCase;

typedef enum {
  WPANSTATUS__SSID_PRESENT__NOT_SET = 0,
  WPANSTATUS__SSID_PRESENT_SSID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__SSID_PRESENT)
} WPANStatus__SSIDPresentCase;

typedef enum {
  WPANSTATUS__PANID_PRESENT__NOT_SET = 0,
  WPANSTATUS__PANID_PRESENT_PANID = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__PANID_PRESENT)
} WPANStatus__PanidPresentCase;

typedef enum {
  WPANSTATUS__MASTER_PRESENT__NOT_SET = 0,
  WPANSTATUS__MASTER_PRESENT_MASTER = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__MASTER_PRESENT)
} WPANStatus__MasterPresentCase;

typedef enum {
  WPANSTATUS__DOT1X_ENABLED_PRESENT__NOT_SET = 0,
  WPANSTATUS__DOT1X_ENABLED_PRESENT_DOT1X_ENABLED = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__DOT1X_ENABLED_PRESENT)
} WPANStatus__Dot1xEnabledPresentCase;

typedef enum {
  WPANSTATUS__SECURITY_LEVEL_PRESENT__NOT_SET = 0,
  WPANSTATUS__SECURITY_LEVEL_PRESENT_SECURITY_LEVEL = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__SECURITY_LEVEL_PRESENT)
} WPANStatus__SecurityLevelPresentCase;

typedef enum {
  WPANSTATUS__RANK_PRESENT__NOT_SET = 0,
  WPANSTATUS__RANK_PRESENT_RANK = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__RANK_PRESENT)
} WPANStatus__RankPresentCase;

typedef enum {
  WPANSTATUS__BEACON_VALID_PRESENT__NOT_SET = 0,
  WPANSTATUS__BEACON_VALID_PRESENT_BEACON_VALID = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__BEACON_VALID_PRESENT)
} WPANStatus__BeaconValidPresentCase;

typedef enum {
  WPANSTATUS__BEACON_VERSION_PRESENT__NOT_SET = 0,
  WPANSTATUS__BEACON_VERSION_PRESENT_BEACON_VERSION = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__BEACON_VERSION_PRESENT)
} WPANStatus__BeaconVersionPresentCase;

typedef enum {
  WPANSTATUS__BEACON_AGE_PRESENT__NOT_SET = 0,
  WPANSTATUS__BEACON_AGE_PRESENT_BEACON_AGE = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__BEACON_AGE_PRESENT)
} WPANStatus__BeaconAgePresentCase;

typedef enum {
  WPANSTATUS__TX_POWER_PRESENT__NOT_SET = 0,
  WPANSTATUS__TX_POWER_PRESENT_TX_POWER = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__TX_POWER_PRESENT)
} WPANStatus__TxPowerPresentCase;

typedef enum {
  WPANSTATUS__DAG_SIZE_PRESENT__NOT_SET = 0,
  WPANSTATUS__DAG_SIZE_PRESENT_DAG_SIZE = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__DAG_SIZE_PRESENT)
} WPANStatus__DagSizePresentCase;

typedef enum {
  WPANSTATUS__METRIC_PRESENT__NOT_SET = 0,
  WPANSTATUS__METRIC_PRESENT_METRIC = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__METRIC_PRESENT)
} WPANStatus__MetricPresentCase;

typedef enum {
  WPANSTATUS__LAST_CHANGED_PRESENT__NOT_SET = 0,
  WPANSTATUS__LAST_CHANGED_PRESENT_LAST_CHANGED = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__LAST_CHANGED_PRESENT)
} WPANStatus__LastChangedPresentCase;

typedef enum {
  WPANSTATUS__LAST_CHANGED_REASON_PRESENT__NOT_SET = 0,
  WPANSTATUS__LAST_CHANGED_REASON_PRESENT_LAST_CHANGED_REASON = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__LAST_CHANGED_REASON_PRESENT)
} WPANStatus__LastChangedReasonPresentCase;

typedef enum {
  WPANSTATUS__DEMO_MODE_ENABLED_PRESENT__NOT_SET = 0,
  WPANSTATUS__DEMO_MODE_ENABLED_PRESENT_DEMO_MODE_ENABLED = 16
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WPANSTATUS__DEMO_MODE_ENABLED_PRESENT)
} WPANStatus__DemoModeEnabledPresentCase;

/*
 * TLV 35
 */
struct  _WPANStatus
{
  ProtobufCMessage base;
  WPANStatus__IfIndexPresentCase if_index_present_case;
  union {
    int32_t ifindex;
  };
  WPANStatus__SSIDPresentCase ssid_present_case;
  union {
    ProtobufCBinaryData ssid;
  };
  WPANStatus__PanidPresentCase panid_present_case;
  union {
    uint32_t panid;
  };
  WPANStatus__MasterPresentCase master_present_case;
  union {
    protobuf_c_boolean master;
  };
  WPANStatus__Dot1xEnabledPresentCase dot1x_enabled_present_case;
  union {
    protobuf_c_boolean dot1xenabled;
  };
  WPANStatus__SecurityLevelPresentCase security_level_present_case;
  union {
    uint32_t securitylevel;
  };
  WPANStatus__RankPresentCase rank_present_case;
  union {
    uint32_t rank;
  };
  WPANStatus__BeaconValidPresentCase beacon_valid_present_case;
  union {
    protobuf_c_boolean beaconvalid;
  };
  WPANStatus__BeaconVersionPresentCase beacon_version_present_case;
  union {
    uint32_t beaconversion;
  };
  WPANStatus__BeaconAgePresentCase beacon_age_present_case;
  union {
    uint32_t beaconage;
  };
  WPANStatus__TxPowerPresentCase tx_power_present_case;
  union {
    int32_t txpower;
  };
  WPANStatus__DagSizePresentCase dag_size_present_case;
  union {
    uint32_t dagsize;
  };
  WPANStatus__MetricPresentCase metric_present_case;
  union {
    uint32_t metric;
  };
  WPANStatus__LastChangedPresentCase last_changed_present_case;
  union {
    uint32_t lastchanged;
  };
  WPANStatus__LastChangedReasonPresentCase last_changed_reason_present_case;
  union {
    uint32_t lastchangedreason;
  };
  WPANStatus__DemoModeEnabledPresentCase demo_mode_enabled_present_case;
  union {
    protobuf_c_boolean demomodeenabled;
  };
};
#define WPANSTATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wpanstatus__descriptor) \
    , WPANSTATUS__IF_INDEX_PRESENT__NOT_SET, {0}, WPANSTATUS__SSID_PRESENT__NOT_SET, {0}, WPANSTATUS__PANID_PRESENT__NOT_SET, {0}, WPANSTATUS__MASTER_PRESENT__NOT_SET, {0}, WPANSTATUS__DOT1X_ENABLED_PRESENT__NOT_SET, {0}, WPANSTATUS__SECURITY_LEVEL_PRESENT__NOT_SET, {0}, WPANSTATUS__RANK_PRESENT__NOT_SET, {0}, WPANSTATUS__BEACON_VALID_PRESENT__NOT_SET, {0}, WPANSTATUS__BEACON_VERSION_PRESENT__NOT_SET, {0}, WPANSTATUS__BEACON_AGE_PRESENT__NOT_SET, {0}, WPANSTATUS__TX_POWER_PRESENT__NOT_SET, {0}, WPANSTATUS__DAG_SIZE_PRESENT__NOT_SET, {0}, WPANSTATUS__METRIC_PRESENT__NOT_SET, {0}, WPANSTATUS__LAST_CHANGED_PRESENT__NOT_SET, {0}, WPANSTATUS__LAST_CHANGED_REASON_PRESENT__NOT_SET, {0}, WPANSTATUS__DEMO_MODE_ENABLED_PRESENT__NOT_SET, {0} }


typedef enum {
  RPLINSTANCE__INSTANCE_INDEX_PRESENT__NOT_SET = 0,
  RPLINSTANCE__INSTANCE_INDEX_PRESENT_INSTANCE_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPLINSTANCE__INSTANCE_INDEX_PRESENT)
} RPLInstance__InstanceIndexPresentCase;

typedef enum {
  RPLINSTANCE__INSTANCE_ID_PRESENT__NOT_SET = 0,
  RPLINSTANCE__INSTANCE_ID_PRESENT_INSTANCE_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPLINSTANCE__INSTANCE_ID_PRESENT)
} RPLInstance__InstanceIdPresentCase;

typedef enum {
  RPLINSTANCE__DO_DAG_ID_PRESENT__NOT_SET = 0,
  RPLINSTANCE__DO_DAG_ID_PRESENT_DO_DAG_ID = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPLINSTANCE__DO_DAG_ID_PRESENT)
} RPLInstance__DoDagIdPresentCase;

typedef enum {
  RPLINSTANCE__DO_DAG_VERSION_NUMBER_PRESENT__NOT_SET = 0,
  RPLINSTANCE__DO_DAG_VERSION_NUMBER_PRESENT_DO_DAG_VERSION_NUMBER = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPLINSTANCE__DO_DAG_VERSION_NUMBER_PRESENT)
} RPLInstance__DoDagVersionNumberPresentCase;

typedef enum {
  RPLINSTANCE__RANK_PRESENT__NOT_SET = 0,
  RPLINSTANCE__RANK_PRESENT_RANK = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPLINSTANCE__RANK_PRESENT)
} RPLInstance__RankPresentCase;

typedef enum {
  RPLINSTANCE__PARENT_COUNT_PRESENT__NOT_SET = 0,
  RPLINSTANCE__PARENT_COUNT_PRESENT_PARENT_COUNT = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPLINSTANCE__PARENT_COUNT_PRESENT)
} RPLInstance__ParentCountPresentCase;

typedef enum {
  RPLINSTANCE__DAG_SIZE_PRESENT__NOT_SET = 0,
  RPLINSTANCE__DAG_SIZE_PRESENT_DAG_SIZE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPLINSTANCE__DAG_SIZE_PRESENT)
} RPLInstance__DagSizePresentCase;

/*
 * TLV 53
 */
struct  _RPLInstance
{
  ProtobufCMessage base;
  RPLInstance__InstanceIndexPresentCase instance_index_present_case;
  union {
    int32_t instanceindex;
  };
  RPLInstance__InstanceIdPresentCase instance_id_present_case;
  union {
    int32_t instanceid;
  };
  RPLInstance__DoDagIdPresentCase do_dag_id_present_case;
  union {
    ProtobufCBinaryData dodagid;
  };
  RPLInstance__DoDagVersionNumberPresentCase do_dag_version_number_present_case;
  union {
    int32_t dodagversionnumber;
  };
  RPLInstance__RankPresentCase rank_present_case;
  union {
    int32_t rank;
  };
  RPLInstance__ParentCountPresentCase parent_count_present_case;
  union {
    /*
     * Count of available parents
     */
    int32_t parentcount;
  };
  RPLInstance__DagSizePresentCase dag_size_present_case;
  union {
    uint32_t dagsize;
  };
};
#define RPLINSTANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rplinstance__descriptor) \
    , RPLINSTANCE__INSTANCE_INDEX_PRESENT__NOT_SET, {0}, RPLINSTANCE__INSTANCE_ID_PRESENT__NOT_SET, {0}, RPLINSTANCE__DO_DAG_ID_PRESENT__NOT_SET, {0}, RPLINSTANCE__DO_DAG_VERSION_NUMBER_PRESENT__NOT_SET, {0}, RPLINSTANCE__RANK_PRESENT__NOT_SET, {0}, RPLINSTANCE__PARENT_COUNT_PRESENT__NOT_SET, {0}, RPLINSTANCE__DAG_SIZE_PRESENT__NOT_SET, {0} }


typedef enum {
  HARDWARE_INFO__HW_ID_PRESENT__NOT_SET = 0,
  HARDWARE_INFO__HW_ID_PRESENT_HW_ID = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_INFO__HW_ID_PRESENT)
} HardwareInfo__HwIdPresentCase;

typedef enum {
  HARDWARE_INFO__VENDOR_HW_ID_PRESENT__NOT_SET = 0,
  HARDWARE_INFO__VENDOR_HW_ID_PRESENT_VENDOR_HW_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HARDWARE_INFO__VENDOR_HW_ID_PRESENT)
} HardwareInfo__VendorHwIdPresentCase;

struct  _HardwareInfo
{
  ProtobufCMessage base;
  HardwareInfo__HwIdPresentCase hw_id_present_case;
  union {
    char *hwid;
  };
  HardwareInfo__VendorHwIdPresentCase vendor_hw_id_present_case;
  union {
    char *vendorhwid;
  };
};
#define HARDWARE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hardware_info__descriptor) \
    , HARDWARE_INFO__HW_ID_PRESENT__NOT_SET, {0}, HARDWARE_INFO__VENDOR_HW_ID_PRESENT__NOT_SET, {0} }


typedef enum {
  TRANSFER_REQUEST__FILE_HASH_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__FILE_HASH_PRESENT_FILE_HASH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__FILE_HASH_PRESENT)
} TransferRequest__FileHashPresentCase;

typedef enum {
  TRANSFER_REQUEST__FILE_NAME_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__FILE_NAME_PRESENT_FILE_NAME = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__FILE_NAME_PRESENT)
} TransferRequest__FileNamePresentCase;

typedef enum {
  TRANSFER_REQUEST__VERSION_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__VERSION_PRESENT_VERSION = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__VERSION_PRESENT)
} TransferRequest__VersionPresentCase;

typedef enum {
  TRANSFER_REQUEST__FILE_SIZE_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__FILE_SIZE_PRESENT_FILE_SIZE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__FILE_SIZE_PRESENT)
} TransferRequest__FileSizePresentCase;

typedef enum {
  TRANSFER_REQUEST__BLOCK_SIZE_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__BLOCK_SIZE_PRESENT_BLOCK_SIZE = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__BLOCK_SIZE_PRESENT)
} TransferRequest__BlockSizePresentCase;

typedef enum {
  TRANSFER_REQUEST__REPORT_INTERVAL_MIN_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__REPORT_INTERVAL_MIN_PRESENT_REPORT_INTERVAL_MIN = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__REPORT_INTERVAL_MIN_PRESENT)
} TransferRequest__ReportIntervalMinPresentCase;

typedef enum {
  TRANSFER_REQUEST__REPORT_INTERVAL_MAX_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__REPORT_INTERVAL_MAX_PRESENT_REPORT_INTERVAL_MAX = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__REPORT_INTERVAL_MAX_PRESENT)
} TransferRequest__ReportIntervalMaxPresentCase;

typedef enum {
  TRANSFER_REQUEST__IS_PATCH_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__IS_PATCH_PRESENT_IS_PATCH = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__IS_PATCH_PRESENT)
} TransferRequest__IsPatchPresentCase;

typedef enum {
  TRANSFER_REQUEST__CHOP_SIZE_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__CHOP_SIZE_PRESENT_CHOP_SIZE = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__CHOP_SIZE_PRESENT)
} TransferRequest__ChopSizePresentCase;

typedef enum {
  TRANSFER_REQUEST__RUN_VERSION_PRESENT__NOT_SET = 0,
  TRANSFER_REQUEST__RUN_VERSION_PRESENT_RUN_VERSION = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_REQUEST__RUN_VERSION_PRESENT)
} TransferRequest__RunVersionPresentCase;

/*
 * TLV 65 TRANSFER_REQUEST_TLVID
 */
struct  _TransferRequest
{
  ProtobufCMessage base;
  HardwareInfo *hwinfo;
  TransferRequest__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  TransferRequest__FileNamePresentCase file_name_present_case;
  union {
    char *filename;
  };
  TransferRequest__VersionPresentCase version_present_case;
  union {
    char *version;
  };
  TransferRequest__FileSizePresentCase file_size_present_case;
  union {
    uint32_t filesize;
  };
  TransferRequest__BlockSizePresentCase block_size_present_case;
  union {
    uint32_t blocksize;
  };
  TransferRequest__ReportIntervalMinPresentCase report_interval_min_present_case;
  union {
    uint32_t reportintervalmin;
  };
  TransferRequest__ReportIntervalMaxPresentCase report_interval_max_present_case;
  union {
    uint32_t reportintervalmax;
  };
  TransferRequest__IsPatchPresentCase is_patch_present_case;
  union {
    uint32_t ispatch;
  };
  TransferRequest__ChopSizePresentCase chop_size_present_case;
  union {
    uint32_t chopsize;
  };
  TransferRequest__RunVersionPresentCase run_version_present_case;
  union {
    char *runversion;
  };
};
#define TRANSFER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transfer_request__descriptor) \
    , NULL, TRANSFER_REQUEST__FILE_HASH_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__FILE_NAME_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__VERSION_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__FILE_SIZE_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__BLOCK_SIZE_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__REPORT_INTERVAL_MIN_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__REPORT_INTERVAL_MAX_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__IS_PATCH_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__CHOP_SIZE_PRESENT__NOT_SET, {0}, TRANSFER_REQUEST__RUN_VERSION_PRESENT__NOT_SET, {0} }


typedef enum {
  IMAGE_BLOCK__FILE_HASH_PRESENT__NOT_SET = 0,
  IMAGE_BLOCK__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IMAGE_BLOCK__FILE_HASH_PRESENT)
} ImageBlock__FileHashPresentCase;

typedef enum {
  IMAGE_BLOCK__BLOCK_NUM_PRESENT__NOT_SET = 0,
  IMAGE_BLOCK__BLOCK_NUM_PRESENT_BLOCK_NUM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IMAGE_BLOCK__BLOCK_NUM_PRESENT)
} ImageBlock__BlockNumPresentCase;

typedef enum {
  IMAGE_BLOCK__BLOCK_DATA_PRESENT__NOT_SET = 0,
  IMAGE_BLOCK__BLOCK_DATA_PRESENT_BLOCK_DATA = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IMAGE_BLOCK__BLOCK_DATA_PRESENT)
} ImageBlock__BlockDataPresentCase;

/*
 * TLV 67 IMAGE_BLOCK_TLVID
 */
struct  _ImageBlock
{
  ProtobufCMessage base;
  ImageBlock__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  ImageBlock__BlockNumPresentCase block_num_present_case;
  union {
    uint32_t blocknum;
  };
  ImageBlock__BlockDataPresentCase block_data_present_case;
  union {
    ProtobufCBinaryData blockdata;
  };
};
#define IMAGE_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&image_block__descriptor) \
    , IMAGE_BLOCK__FILE_HASH_PRESENT__NOT_SET, {0}, IMAGE_BLOCK__BLOCK_NUM_PRESENT__NOT_SET, {0}, IMAGE_BLOCK__BLOCK_DATA_PRESENT__NOT_SET, {0} }


typedef enum {
  LOAD_REQUEST__FILE_HASH_PRESENT__NOT_SET = 0,
  LOAD_REQUEST__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOAD_REQUEST__FILE_HASH_PRESENT)
} LoadRequest__FileHashPresentCase;

typedef enum {
  LOAD_REQUEST__LOAD_TIME_PRESENT__NOT_SET = 0,
  LOAD_REQUEST__LOAD_TIME_PRESENT_LOAD_TIME = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOAD_REQUEST__LOAD_TIME_PRESENT)
} LoadRequest__LoadTimePresentCase;

/*
 * TLV 68 LOAD_REQUEST_TLVID
 */
struct  _LoadRequest
{
  ProtobufCMessage base;
  LoadRequest__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  LoadRequest__LoadTimePresentCase load_time_present_case;
  union {
    uint32_t loadtime;
  };
};
#define LOAD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&load_request__descriptor) \
    , LOAD_REQUEST__FILE_HASH_PRESENT__NOT_SET, {0}, LOAD_REQUEST__LOAD_TIME_PRESENT__NOT_SET, {0} }


typedef enum {
  CANCEL_LOAD_REQUEST__FILE_HASH_PRESENT__NOT_SET = 0,
  CANCEL_LOAD_REQUEST__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CANCEL_LOAD_REQUEST__FILE_HASH_PRESENT)
} CancelLoadRequest__FileHashPresentCase;

/*
 * TLV 69 CANCEL_LOAD_REQUEST_TLVID
 */
struct  _CancelLoadRequest
{
  ProtobufCMessage base;
  CancelLoadRequest__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
};
#define CANCEL_LOAD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_load_request__descriptor) \
    , CANCEL_LOAD_REQUEST__FILE_HASH_PRESENT__NOT_SET, {0} }


typedef enum {
  SET_BACKUP_REQUEST__FILE_HASH_PRESENT__NOT_SET = 0,
  SET_BACKUP_REQUEST__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SET_BACKUP_REQUEST__FILE_HASH_PRESENT)
} SetBackupRequest__FileHashPresentCase;

/*
 * TLV 70 SET_BACKUP_REQUEST_TLVID
 */
struct  _SetBackupRequest
{
  ProtobufCMessage base;
  SetBackupRequest__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
};
#define SET_BACKUP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_backup_request__descriptor) \
    , SET_BACKUP_REQUEST__FILE_HASH_PRESENT__NOT_SET, {0} }


typedef enum {
  TRANSFER_RESPONSE__FILE_HASH_PRESENT__NOT_SET = 0,
  TRANSFER_RESPONSE__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_RESPONSE__FILE_HASH_PRESENT)
} TransferResponse__FileHashPresentCase;

typedef enum {
  TRANSFER_RESPONSE__RESPONSE_PRESENT__NOT_SET = 0,
  TRANSFER_RESPONSE__RESPONSE_PRESENT_RESPONSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSFER_RESPONSE__RESPONSE_PRESENT)
} TransferResponse__ResponsePresentCase;

/*
 * TLV 71 TRANSFER_RESPONSE_TLVID
 */
struct  _TransferResponse
{
  ProtobufCMessage base;
  TransferResponse__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  TransferResponse__ResponsePresentCase response_present_case;
  union {
    uint32_t response;
  };
};
#define TRANSFER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transfer_response__descriptor) \
    , TRANSFER_RESPONSE__FILE_HASH_PRESENT__NOT_SET, {0}, TRANSFER_RESPONSE__RESPONSE_PRESENT__NOT_SET, {0} }


typedef enum {
  LOAD_RESPONSE__FILE_HASH_PRESENT__NOT_SET = 0,
  LOAD_RESPONSE__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOAD_RESPONSE__FILE_HASH_PRESENT)
} LoadResponse__FileHashPresentCase;

typedef enum {
  LOAD_RESPONSE__RESPONSE_PRESENT__NOT_SET = 0,
  LOAD_RESPONSE__RESPONSE_PRESENT_RESPONSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOAD_RESPONSE__RESPONSE_PRESENT)
} LoadResponse__ResponsePresentCase;

typedef enum {
  LOAD_RESPONSE__LOAD_TIME_PRESENT__NOT_SET = 0,
  LOAD_RESPONSE__LOAD_TIME_PRESENT_LOAD_TIME = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOAD_RESPONSE__LOAD_TIME_PRESENT)
} LoadResponse__LoadTimePresentCase;

/*
 * TLV 72 LOAD_RESPONSE_TLVID
 */
struct  _LoadResponse
{
  ProtobufCMessage base;
  LoadResponse__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  LoadResponse__ResponsePresentCase response_present_case;
  union {
    uint32_t response;
  };
  LoadResponse__LoadTimePresentCase load_time_present_case;
  union {
    uint32_t loadtime;
  };
};
#define LOAD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&load_response__descriptor) \
    , LOAD_RESPONSE__FILE_HASH_PRESENT__NOT_SET, {0}, LOAD_RESPONSE__RESPONSE_PRESENT__NOT_SET, {0}, LOAD_RESPONSE__LOAD_TIME_PRESENT__NOT_SET, {0} }


typedef enum {
  CANCEL_LOAD_RESPONSE__FILE_HASH_PRESENT__NOT_SET = 0,
  CANCEL_LOAD_RESPONSE__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CANCEL_LOAD_RESPONSE__FILE_HASH_PRESENT)
} CancelLoadResponse__FileHashPresentCase;

typedef enum {
  CANCEL_LOAD_RESPONSE__RESPONSE_PRESENT__NOT_SET = 0,
  CANCEL_LOAD_RESPONSE__RESPONSE_PRESENT_RESPONSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CANCEL_LOAD_RESPONSE__RESPONSE_PRESENT)
} CancelLoadResponse__ResponsePresentCase;

/*
 * TLV 73 CANCEL_LOAD_RESPONSE_TLVID
 */
struct  _CancelLoadResponse
{
  ProtobufCMessage base;
  CancelLoadResponse__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  CancelLoadResponse__ResponsePresentCase response_present_case;
  union {
    uint32_t response;
  };
};
#define CANCEL_LOAD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_load_response__descriptor) \
    , CANCEL_LOAD_RESPONSE__FILE_HASH_PRESENT__NOT_SET, {0}, CANCEL_LOAD_RESPONSE__RESPONSE_PRESENT__NOT_SET, {0} }


typedef enum {
  SET_BACKUP_RESPONSE__FILE_HASH_PRESENT__NOT_SET = 0,
  SET_BACKUP_RESPONSE__FILE_HASH_PRESENT_FILE_HASH = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SET_BACKUP_RESPONSE__FILE_HASH_PRESENT)
} SetBackupResponse__FileHashPresentCase;

typedef enum {
  SET_BACKUP_RESPONSE__RESPONSE_PRESENT__NOT_SET = 0,
  SET_BACKUP_RESPONSE__RESPONSE_PRESENT_RESPONSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SET_BACKUP_RESPONSE__RESPONSE_PRESENT)
} SetBackupResponse__ResponsePresentCase;

/*
 * TLV 74 SET_BACKUP_RESPONSE_TLVID
 */
struct  _SetBackupResponse
{
  ProtobufCMessage base;
  SetBackupResponse__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  SetBackupResponse__ResponsePresentCase response_present_case;
  union {
    uint32_t response;
  };
};
#define SET_BACKUP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_backup_response__descriptor) \
    , SET_BACKUP_RESPONSE__FILE_HASH_PRESENT__NOT_SET, {0}, SET_BACKUP_RESPONSE__RESPONSE_PRESENT__NOT_SET, {0} }


typedef enum {
  FIRMWARE_IMAGE_INFO__INDEX_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__INDEX_PRESENT_INDEX = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__INDEX_PRESENT)
} FirmwareImageInfo__IndexPresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__FILE_HASH_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__FILE_HASH_PRESENT_FILE_HASH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__FILE_HASH_PRESENT)
} FirmwareImageInfo__FileHashPresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__FILE_NAME_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__FILE_NAME_PRESENT_FILE_NAME = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__FILE_NAME_PRESENT)
} FirmwareImageInfo__FileNamePresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__VERSION_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__VERSION_PRESENT_VERSION = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__VERSION_PRESENT)
} FirmwareImageInfo__VersionPresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__FILE_SIZE_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__FILE_SIZE_PRESENT_FILE_SIZE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__FILE_SIZE_PRESENT)
} FirmwareImageInfo__FileSizePresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__BLOCK_SIZE_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__BLOCK_SIZE_PRESENT_BLOCK_SIZE = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__BLOCK_SIZE_PRESENT)
} FirmwareImageInfo__BlockSizePresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__BITMAP_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__BITMAP_PRESENT_BITMAP = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__BITMAP_PRESENT)
} FirmwareImageInfo__BitmapPresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__IS_DEFAULT_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__IS_DEFAULT_PRESENT_IS_DEFAULT = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__IS_DEFAULT_PRESENT)
} FirmwareImageInfo__IsDefaultPresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__IS_RUNNING_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__IS_RUNNING_PRESENT_IS_RUNNING = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__IS_RUNNING_PRESENT)
} FirmwareImageInfo__IsRunningPresentCase;

typedef enum {
  FIRMWARE_IMAGE_INFO__LOAD_TIME_PRESENT__NOT_SET = 0,
  FIRMWARE_IMAGE_INFO__LOAD_TIME_PRESENT_LOAD_TIME = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIRMWARE_IMAGE_INFO__LOAD_TIME_PRESENT)
} FirmwareImageInfo__LoadTimePresentCase;

/*
 * TLV 75 FIRMWARE_IMAGE_INFO_TLVID
 */
struct  _FirmwareImageInfo
{
  ProtobufCMessage base;
  /*
   * oneof bitmapOffset_present {
   * uint32 bitmapOffset = 12;
   * }
   *oneof kernelVersion_present {
   *string kernelVersion = 13;
   *}
   *oneof subKernelVersion_present {
   *string subKernelVersion = 14;
   *}
   *oneof isPatch_present {
   *uint32 isPatch = 15;
   *}
   *oneof loadErrorCode_present {
   *uint32 loadErrorCode = 16;
   *}
   *oneof subLoadErrorCode_present {
   *uint32 subLoadErrorCode = 17;
   *}
   */
  HardwareInfo *hwinfo;
  FirmwareImageInfo__IndexPresentCase index_present_case;
  union {
    uint32_t index;
  };
  FirmwareImageInfo__FileHashPresentCase file_hash_present_case;
  union {
    ProtobufCBinaryData filehash;
  };
  FirmwareImageInfo__FileNamePresentCase file_name_present_case;
  union {
    char *filename;
  };
  FirmwareImageInfo__VersionPresentCase version_present_case;
  union {
    char *version;
  };
  FirmwareImageInfo__FileSizePresentCase file_size_present_case;
  union {
    uint32_t filesize;
  };
  FirmwareImageInfo__BlockSizePresentCase block_size_present_case;
  union {
    uint32_t blocksize;
  };
  FirmwareImageInfo__BitmapPresentCase bitmap_present_case;
  union {
    ProtobufCBinaryData bitmap;
  };
  FirmwareImageInfo__IsDefaultPresentCase is_default_present_case;
  union {
    protobuf_c_boolean isdefault;
  };
  FirmwareImageInfo__IsRunningPresentCase is_running_present_case;
  union {
    protobuf_c_boolean isrunning;
  };
  FirmwareImageInfo__LoadTimePresentCase load_time_present_case;
  union {
    uint32_t loadtime;
  };
};
#define FIRMWARE_IMAGE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&firmware_image_info__descriptor) \
    , NULL, FIRMWARE_IMAGE_INFO__INDEX_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__FILE_HASH_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__FILE_NAME_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__VERSION_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__FILE_SIZE_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__BLOCK_SIZE_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__BITMAP_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__IS_DEFAULT_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__IS_RUNNING_PRESENT__NOT_SET, {0}, FIRMWARE_IMAGE_INFO__LOAD_TIME_PRESENT__NOT_SET, {0} }


typedef enum {
  VENDOR_TLV__SUB_TYPE_PRESENT__NOT_SET = 0,
  VENDOR_TLV__SUB_TYPE_PRESENT_SUB_TYPE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VENDOR_TLV__SUB_TYPE_PRESENT)
} VendorTlv__SubTypePresentCase;

typedef enum {
  VENDOR_TLV__VALUE_PRESENT__NOT_SET = 0,
  VENDOR_TLV__VALUE_PRESENT_VALUE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VENDOR_TLV__VALUE_PRESENT)
} VendorTlv__ValuePresentCase;

/*
 * TLV 127 VENDOR_TLVID
 */
struct  _VendorTlv
{
  ProtobufCMessage base;
  VendorTlv__SubTypePresentCase sub_type_present_case;
  union {
    uint32_t subtype;
  };
  VendorTlv__ValuePresentCase value_present_case;
  union {
    ProtobufCBinaryData value;
  };
};
#define VENDOR_TLV__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vendor_tlv__descriptor) \
    , VENDOR_TLV__SUB_TYPE_PRESENT__NOT_SET, {0}, VENDOR_TLV__VALUE_PRESENT__NOT_SET, {0} }


/* TlvIndex methods */
void   tlv_index__init
                     (TlvIndex         *message);
size_t tlv_index__get_packed_size
                     (const TlvIndex   *message);
size_t tlv_index__pack
                     (const TlvIndex   *message,
                      uint8_t             *out);
size_t tlv_index__pack_to_buffer
                     (const TlvIndex   *message,
                      ProtobufCBuffer     *buffer);
TlvIndex *
       tlv_index__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tlv_index__free_unpacked
                     (TlvIndex *message,
                      ProtobufCAllocator *allocator);
/* DeviceID methods */
void   device_id__init
                     (DeviceID         *message);
size_t device_id__get_packed_size
                     (const DeviceID   *message);
size_t device_id__pack
                     (const DeviceID   *message,
                      uint8_t             *out);
size_t device_id__pack_to_buffer
                     (const DeviceID   *message,
                      ProtobufCBuffer     *buffer);
DeviceID *
       device_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_id__free_unpacked
                     (DeviceID *message,
                      ProtobufCAllocator *allocator);
/* SessionID methods */
void   session_id__init
                     (SessionID         *message);
size_t session_id__get_packed_size
                     (const SessionID   *message);
size_t session_id__pack
                     (const SessionID   *message,
                      uint8_t             *out);
size_t session_id__pack_to_buffer
                     (const SessionID   *message,
                      ProtobufCBuffer     *buffer);
SessionID *
       session_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   session_id__free_unpacked
                     (SessionID *message,
                      ProtobufCAllocator *allocator);
/* DescriptionRequest methods */
void   description_request__init
                     (DescriptionRequest         *message);
size_t description_request__get_packed_size
                     (const DescriptionRequest   *message);
size_t description_request__pack
                     (const DescriptionRequest   *message,
                      uint8_t             *out);
size_t description_request__pack_to_buffer
                     (const DescriptionRequest   *message,
                      ProtobufCBuffer     *buffer);
DescriptionRequest *
       description_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   description_request__free_unpacked
                     (DescriptionRequest *message,
                      ProtobufCAllocator *allocator);
/* ReportSubscribe methods */
void   report_subscribe__init
                     (ReportSubscribe         *message);
size_t report_subscribe__get_packed_size
                     (const ReportSubscribe   *message);
size_t report_subscribe__pack
                     (const ReportSubscribe   *message,
                      uint8_t             *out);
size_t report_subscribe__pack_to_buffer
                     (const ReportSubscribe   *message,
                      ProtobufCBuffer     *buffer);
ReportSubscribe *
       report_subscribe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   report_subscribe__free_unpacked
                     (ReportSubscribe *message,
                      ProtobufCAllocator *allocator);
/* CGMSSettings methods */
void   cgmssettings__init
                     (CGMSSettings         *message);
size_t cgmssettings__get_packed_size
                     (const CGMSSettings   *message);
size_t cgmssettings__pack
                     (const CGMSSettings   *message,
                      uint8_t             *out);
size_t cgmssettings__pack_to_buffer
                     (const CGMSSettings   *message,
                      ProtobufCBuffer     *buffer);
CGMSSettings *
       cgmssettings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cgmssettings__free_unpacked
                     (CGMSSettings *message,
                      ProtobufCAllocator *allocator);
/* CGMSStatus methods */
void   cgmsstatus__init
                     (CGMSStatus         *message);
size_t cgmsstatus__get_packed_size
                     (const CGMSStatus   *message);
size_t cgmsstatus__pack
                     (const CGMSStatus   *message,
                      uint8_t             *out);
size_t cgmsstatus__pack_to_buffer
                     (const CGMSStatus   *message,
                      ProtobufCBuffer     *buffer);
CGMSStatus *
       cgmsstatus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cgmsstatus__free_unpacked
                     (CGMSStatus *message,
                      ProtobufCAllocator *allocator);
/* CGMSNotification methods */
void   cgmsnotification__init
                     (CGMSNotification         *message);
size_t cgmsnotification__get_packed_size
                     (const CGMSNotification   *message);
size_t cgmsnotification__pack
                     (const CGMSNotification   *message,
                      uint8_t             *out);
size_t cgmsnotification__pack_to_buffer
                     (const CGMSNotification   *message,
                      ProtobufCBuffer     *buffer);
CGMSNotification *
       cgmsnotification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cgmsnotification__free_unpacked
                     (CGMSNotification *message,
                      ProtobufCAllocator *allocator);
/* CGMSStats methods */
void   cgmsstats__init
                     (CGMSStats         *message);
size_t cgmsstats__get_packed_size
                     (const CGMSStats   *message);
size_t cgmsstats__pack
                     (const CGMSStats   *message,
                      uint8_t             *out);
size_t cgmsstats__pack_to_buffer
                     (const CGMSStats   *message,
                      ProtobufCBuffer     *buffer);
CGMSStats *
       cgmsstats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cgmsstats__free_unpacked
                     (CGMSStats *message,
                      ProtobufCAllocator *allocator);
/* GroupAssign methods */
void   group_assign__init
                     (GroupAssign         *message);
size_t group_assign__get_packed_size
                     (const GroupAssign   *message);
size_t group_assign__pack
                     (const GroupAssign   *message,
                      uint8_t             *out);
size_t group_assign__pack_to_buffer
                     (const GroupAssign   *message,
                      ProtobufCBuffer     *buffer);
GroupAssign *
       group_assign__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_assign__free_unpacked
                     (GroupAssign *message,
                      ProtobufCAllocator *allocator);
/* GroupMatch methods */
void   group_match__init
                     (GroupMatch         *message);
size_t group_match__get_packed_size
                     (const GroupMatch   *message);
size_t group_match__pack
                     (const GroupMatch   *message,
                      uint8_t             *out);
size_t group_match__pack_to_buffer
                     (const GroupMatch   *message,
                      ProtobufCBuffer     *buffer);
GroupMatch *
       group_match__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_match__free_unpacked
                     (GroupMatch *message,
                      ProtobufCAllocator *allocator);
/* GroupInfo methods */
void   group_info__init
                     (GroupInfo         *message);
size_t group_info__get_packed_size
                     (const GroupInfo   *message);
size_t group_info__pack
                     (const GroupInfo   *message,
                      uint8_t             *out);
size_t group_info__pack_to_buffer
                     (const GroupInfo   *message,
                      ProtobufCBuffer     *buffer);
GroupInfo *
       group_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_info__free_unpacked
                     (GroupInfo *message,
                      ProtobufCAllocator *allocator);
/* SignatureValidity methods */
void   signature_validity__init
                     (SignatureValidity         *message);
size_t signature_validity__get_packed_size
                     (const SignatureValidity   *message);
size_t signature_validity__pack
                     (const SignatureValidity   *message,
                      uint8_t             *out);
size_t signature_validity__pack_to_buffer
                     (const SignatureValidity   *message,
                      ProtobufCBuffer     *buffer);
SignatureValidity *
       signature_validity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   signature_validity__free_unpacked
                     (SignatureValidity *message,
                      ProtobufCAllocator *allocator);
/* Signature methods */
void   signature__init
                     (Signature         *message);
size_t signature__get_packed_size
                     (const Signature   *message);
size_t signature__pack
                     (const Signature   *message,
                      uint8_t             *out);
size_t signature__pack_to_buffer
                     (const Signature   *message,
                      ProtobufCBuffer     *buffer);
Signature *
       signature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   signature__free_unpacked
                     (Signature *message,
                      ProtobufCAllocator *allocator);
/* SignatureSettings methods */
void   signature_settings__init
                     (SignatureSettings         *message);
size_t signature_settings__get_packed_size
                     (const SignatureSettings   *message);
size_t signature_settings__pack
                     (const SignatureSettings   *message,
                      uint8_t             *out);
size_t signature_settings__pack_to_buffer
                     (const SignatureSettings   *message,
                      ProtobufCBuffer     *buffer);
SignatureSettings *
       signature_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   signature_settings__free_unpacked
                     (SignatureSettings *message,
                      ProtobufCAllocator *allocator);
/* HardwareDesc methods */
void   hardware_desc__init
                     (HardwareDesc         *message);
size_t hardware_desc__get_packed_size
                     (const HardwareDesc   *message);
size_t hardware_desc__pack
                     (const HardwareDesc   *message,
                      uint8_t             *out);
size_t hardware_desc__pack_to_buffer
                     (const HardwareDesc   *message,
                      ProtobufCBuffer     *buffer);
HardwareDesc *
       hardware_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hardware_desc__free_unpacked
                     (HardwareDesc *message,
                      ProtobufCAllocator *allocator);
/* InterfaceDesc methods */
void   interface_desc__init
                     (InterfaceDesc         *message);
size_t interface_desc__get_packed_size
                     (const InterfaceDesc   *message);
size_t interface_desc__pack
                     (const InterfaceDesc   *message,
                      uint8_t             *out);
size_t interface_desc__pack_to_buffer
                     (const InterfaceDesc   *message,
                      ProtobufCBuffer     *buffer);
InterfaceDesc *
       interface_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interface_desc__free_unpacked
                     (InterfaceDesc *message,
                      ProtobufCAllocator *allocator);
/* IPAddress methods */
void   ipaddress__init
                     (IPAddress         *message);
size_t ipaddress__get_packed_size
                     (const IPAddress   *message);
size_t ipaddress__pack
                     (const IPAddress   *message,
                      uint8_t             *out);
size_t ipaddress__pack_to_buffer
                     (const IPAddress   *message,
                      ProtobufCBuffer     *buffer);
IPAddress *
       ipaddress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipaddress__free_unpacked
                     (IPAddress *message,
                      ProtobufCAllocator *allocator);
/* IPRoute methods */
void   iproute__init
                     (IPRoute         *message);
size_t iproute__get_packed_size
                     (const IPRoute   *message);
size_t iproute__pack
                     (const IPRoute   *message,
                      uint8_t             *out);
size_t iproute__pack_to_buffer
                     (const IPRoute   *message,
                      ProtobufCBuffer     *buffer);
IPRoute *
       iproute__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iproute__free_unpacked
                     (IPRoute *message,
                      ProtobufCAllocator *allocator);
/* CurrentTime methods */
void   current_time__init
                     (CurrentTime         *message);
size_t current_time__get_packed_size
                     (const CurrentTime   *message);
size_t current_time__pack
                     (const CurrentTime   *message,
                      uint8_t             *out);
size_t current_time__pack_to_buffer
                     (const CurrentTime   *message,
                      ProtobufCBuffer     *buffer);
CurrentTime *
       current_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   current_time__free_unpacked
                     (CurrentTime *message,
                      ProtobufCAllocator *allocator);
/* Uptime methods */
void   uptime__init
                     (Uptime         *message);
size_t uptime__get_packed_size
                     (const Uptime   *message);
size_t uptime__pack
                     (const Uptime   *message,
                      uint8_t             *out);
size_t uptime__pack_to_buffer
                     (const Uptime   *message,
                      ProtobufCBuffer     *buffer);
Uptime *
       uptime__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   uptime__free_unpacked
                     (Uptime *message,
                      ProtobufCAllocator *allocator);
/* InterfaceMetrics methods */
void   interface_metrics__init
                     (InterfaceMetrics         *message);
size_t interface_metrics__get_packed_size
                     (const InterfaceMetrics   *message);
size_t interface_metrics__pack
                     (const InterfaceMetrics   *message,
                      uint8_t             *out);
size_t interface_metrics__pack_to_buffer
                     (const InterfaceMetrics   *message,
                      ProtobufCBuffer     *buffer);
InterfaceMetrics *
       interface_metrics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interface_metrics__free_unpacked
                     (InterfaceMetrics *message,
                      ProtobufCAllocator *allocator);
/* IPRouteRPLMetrics methods */
void   iproute_rplmetrics__init
                     (IPRouteRPLMetrics         *message);
size_t iproute_rplmetrics__get_packed_size
                     (const IPRouteRPLMetrics   *message);
size_t iproute_rplmetrics__pack
                     (const IPRouteRPLMetrics   *message,
                      uint8_t             *out);
size_t iproute_rplmetrics__pack_to_buffer
                     (const IPRouteRPLMetrics   *message,
                      ProtobufCBuffer     *buffer);
IPRouteRPLMetrics *
       iproute_rplmetrics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iproute_rplmetrics__free_unpacked
                     (IPRouteRPLMetrics *message,
                      ProtobufCAllocator *allocator);
/* WPANStatus methods */
void   wpanstatus__init
                     (WPANStatus         *message);
size_t wpanstatus__get_packed_size
                     (const WPANStatus   *message);
size_t wpanstatus__pack
                     (const WPANStatus   *message,
                      uint8_t             *out);
size_t wpanstatus__pack_to_buffer
                     (const WPANStatus   *message,
                      ProtobufCBuffer     *buffer);
WPANStatus *
       wpanstatus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wpanstatus__free_unpacked
                     (WPANStatus *message,
                      ProtobufCAllocator *allocator);
/* RPLInstance methods */
void   rplinstance__init
                     (RPLInstance         *message);
size_t rplinstance__get_packed_size
                     (const RPLInstance   *message);
size_t rplinstance__pack
                     (const RPLInstance   *message,
                      uint8_t             *out);
size_t rplinstance__pack_to_buffer
                     (const RPLInstance   *message,
                      ProtobufCBuffer     *buffer);
RPLInstance *
       rplinstance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rplinstance__free_unpacked
                     (RPLInstance *message,
                      ProtobufCAllocator *allocator);
/* HardwareInfo methods */
void   hardware_info__init
                     (HardwareInfo         *message);
size_t hardware_info__get_packed_size
                     (const HardwareInfo   *message);
size_t hardware_info__pack
                     (const HardwareInfo   *message,
                      uint8_t             *out);
size_t hardware_info__pack_to_buffer
                     (const HardwareInfo   *message,
                      ProtobufCBuffer     *buffer);
HardwareInfo *
       hardware_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hardware_info__free_unpacked
                     (HardwareInfo *message,
                      ProtobufCAllocator *allocator);
/* TransferRequest methods */
void   transfer_request__init
                     (TransferRequest         *message);
size_t transfer_request__get_packed_size
                     (const TransferRequest   *message);
size_t transfer_request__pack
                     (const TransferRequest   *message,
                      uint8_t             *out);
size_t transfer_request__pack_to_buffer
                     (const TransferRequest   *message,
                      ProtobufCBuffer     *buffer);
TransferRequest *
       transfer_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transfer_request__free_unpacked
                     (TransferRequest *message,
                      ProtobufCAllocator *allocator);
/* ImageBlock methods */
void   image_block__init
                     (ImageBlock         *message);
size_t image_block__get_packed_size
                     (const ImageBlock   *message);
size_t image_block__pack
                     (const ImageBlock   *message,
                      uint8_t             *out);
size_t image_block__pack_to_buffer
                     (const ImageBlock   *message,
                      ProtobufCBuffer     *buffer);
ImageBlock *
       image_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   image_block__free_unpacked
                     (ImageBlock *message,
                      ProtobufCAllocator *allocator);
/* LoadRequest methods */
void   load_request__init
                     (LoadRequest         *message);
size_t load_request__get_packed_size
                     (const LoadRequest   *message);
size_t load_request__pack
                     (const LoadRequest   *message,
                      uint8_t             *out);
size_t load_request__pack_to_buffer
                     (const LoadRequest   *message,
                      ProtobufCBuffer     *buffer);
LoadRequest *
       load_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   load_request__free_unpacked
                     (LoadRequest *message,
                      ProtobufCAllocator *allocator);
/* CancelLoadRequest methods */
void   cancel_load_request__init
                     (CancelLoadRequest         *message);
size_t cancel_load_request__get_packed_size
                     (const CancelLoadRequest   *message);
size_t cancel_load_request__pack
                     (const CancelLoadRequest   *message,
                      uint8_t             *out);
size_t cancel_load_request__pack_to_buffer
                     (const CancelLoadRequest   *message,
                      ProtobufCBuffer     *buffer);
CancelLoadRequest *
       cancel_load_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_load_request__free_unpacked
                     (CancelLoadRequest *message,
                      ProtobufCAllocator *allocator);
/* SetBackupRequest methods */
void   set_backup_request__init
                     (SetBackupRequest         *message);
size_t set_backup_request__get_packed_size
                     (const SetBackupRequest   *message);
size_t set_backup_request__pack
                     (const SetBackupRequest   *message,
                      uint8_t             *out);
size_t set_backup_request__pack_to_buffer
                     (const SetBackupRequest   *message,
                      ProtobufCBuffer     *buffer);
SetBackupRequest *
       set_backup_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_backup_request__free_unpacked
                     (SetBackupRequest *message,
                      ProtobufCAllocator *allocator);
/* TransferResponse methods */
void   transfer_response__init
                     (TransferResponse         *message);
size_t transfer_response__get_packed_size
                     (const TransferResponse   *message);
size_t transfer_response__pack
                     (const TransferResponse   *message,
                      uint8_t             *out);
size_t transfer_response__pack_to_buffer
                     (const TransferResponse   *message,
                      ProtobufCBuffer     *buffer);
TransferResponse *
       transfer_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transfer_response__free_unpacked
                     (TransferResponse *message,
                      ProtobufCAllocator *allocator);
/* LoadResponse methods */
void   load_response__init
                     (LoadResponse         *message);
size_t load_response__get_packed_size
                     (const LoadResponse   *message);
size_t load_response__pack
                     (const LoadResponse   *message,
                      uint8_t             *out);
size_t load_response__pack_to_buffer
                     (const LoadResponse   *message,
                      ProtobufCBuffer     *buffer);
LoadResponse *
       load_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   load_response__free_unpacked
                     (LoadResponse *message,
                      ProtobufCAllocator *allocator);
/* CancelLoadResponse methods */
void   cancel_load_response__init
                     (CancelLoadResponse         *message);
size_t cancel_load_response__get_packed_size
                     (const CancelLoadResponse   *message);
size_t cancel_load_response__pack
                     (const CancelLoadResponse   *message,
                      uint8_t             *out);
size_t cancel_load_response__pack_to_buffer
                     (const CancelLoadResponse   *message,
                      ProtobufCBuffer     *buffer);
CancelLoadResponse *
       cancel_load_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_load_response__free_unpacked
                     (CancelLoadResponse *message,
                      ProtobufCAllocator *allocator);
/* SetBackupResponse methods */
void   set_backup_response__init
                     (SetBackupResponse         *message);
size_t set_backup_response__get_packed_size
                     (const SetBackupResponse   *message);
size_t set_backup_response__pack
                     (const SetBackupResponse   *message,
                      uint8_t             *out);
size_t set_backup_response__pack_to_buffer
                     (const SetBackupResponse   *message,
                      ProtobufCBuffer     *buffer);
SetBackupResponse *
       set_backup_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_backup_response__free_unpacked
                     (SetBackupResponse *message,
                      ProtobufCAllocator *allocator);
/* FirmwareImageInfo methods */
void   firmware_image_info__init
                     (FirmwareImageInfo         *message);
size_t firmware_image_info__get_packed_size
                     (const FirmwareImageInfo   *message);
size_t firmware_image_info__pack
                     (const FirmwareImageInfo   *message,
                      uint8_t             *out);
size_t firmware_image_info__pack_to_buffer
                     (const FirmwareImageInfo   *message,
                      ProtobufCBuffer     *buffer);
FirmwareImageInfo *
       firmware_image_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   firmware_image_info__free_unpacked
                     (FirmwareImageInfo *message,
                      ProtobufCAllocator *allocator);
/* VendorTlv methods */
void   vendor_tlv__init
                     (VendorTlv         *message);
size_t vendor_tlv__get_packed_size
                     (const VendorTlv   *message);
size_t vendor_tlv__pack
                     (const VendorTlv   *message,
                      uint8_t             *out);
size_t vendor_tlv__pack_to_buffer
                     (const VendorTlv   *message,
                      ProtobufCBuffer     *buffer);
VendorTlv *
       vendor_tlv__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vendor_tlv__free_unpacked
                     (VendorTlv *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TlvIndex_Closure)
                 (const TlvIndex *message,
                  void *closure_data);
typedef void (*DeviceID_Closure)
                 (const DeviceID *message,
                  void *closure_data);
typedef void (*SessionID_Closure)
                 (const SessionID *message,
                  void *closure_data);
typedef void (*DescriptionRequest_Closure)
                 (const DescriptionRequest *message,
                  void *closure_data);
typedef void (*ReportSubscribe_Closure)
                 (const ReportSubscribe *message,
                  void *closure_data);
typedef void (*CGMSSettings_Closure)
                 (const CGMSSettings *message,
                  void *closure_data);
typedef void (*CGMSStatus_Closure)
                 (const CGMSStatus *message,
                  void *closure_data);
typedef void (*CGMSNotification_Closure)
                 (const CGMSNotification *message,
                  void *closure_data);
typedef void (*CGMSStats_Closure)
                 (const CGMSStats *message,
                  void *closure_data);
typedef void (*GroupAssign_Closure)
                 (const GroupAssign *message,
                  void *closure_data);
typedef void (*GroupMatch_Closure)
                 (const GroupMatch *message,
                  void *closure_data);
typedef void (*GroupInfo_Closure)
                 (const GroupInfo *message,
                  void *closure_data);
typedef void (*SignatureValidity_Closure)
                 (const SignatureValidity *message,
                  void *closure_data);
typedef void (*Signature_Closure)
                 (const Signature *message,
                  void *closure_data);
typedef void (*SignatureSettings_Closure)
                 (const SignatureSettings *message,
                  void *closure_data);
typedef void (*HardwareDesc_Closure)
                 (const HardwareDesc *message,
                  void *closure_data);
typedef void (*InterfaceDesc_Closure)
                 (const InterfaceDesc *message,
                  void *closure_data);
typedef void (*IPAddress_Closure)
                 (const IPAddress *message,
                  void *closure_data);
typedef void (*IPRoute_Closure)
                 (const IPRoute *message,
                  void *closure_data);
typedef void (*CurrentTime_Closure)
                 (const CurrentTime *message,
                  void *closure_data);
typedef void (*Uptime_Closure)
                 (const Uptime *message,
                  void *closure_data);
typedef void (*InterfaceMetrics_Closure)
                 (const InterfaceMetrics *message,
                  void *closure_data);
typedef void (*IPRouteRPLMetrics_Closure)
                 (const IPRouteRPLMetrics *message,
                  void *closure_data);
typedef void (*WPANStatus_Closure)
                 (const WPANStatus *message,
                  void *closure_data);
typedef void (*RPLInstance_Closure)
                 (const RPLInstance *message,
                  void *closure_data);
typedef void (*HardwareInfo_Closure)
                 (const HardwareInfo *message,
                  void *closure_data);
typedef void (*TransferRequest_Closure)
                 (const TransferRequest *message,
                  void *closure_data);
typedef void (*ImageBlock_Closure)
                 (const ImageBlock *message,
                  void *closure_data);
typedef void (*LoadRequest_Closure)
                 (const LoadRequest *message,
                  void *closure_data);
typedef void (*CancelLoadRequest_Closure)
                 (const CancelLoadRequest *message,
                  void *closure_data);
typedef void (*SetBackupRequest_Closure)
                 (const SetBackupRequest *message,
                  void *closure_data);
typedef void (*TransferResponse_Closure)
                 (const TransferResponse *message,
                  void *closure_data);
typedef void (*LoadResponse_Closure)
                 (const LoadResponse *message,
                  void *closure_data);
typedef void (*CancelLoadResponse_Closure)
                 (const CancelLoadResponse *message,
                  void *closure_data);
typedef void (*SetBackupResponse_Closure)
                 (const SetBackupResponse *message,
                  void *closure_data);
typedef void (*FirmwareImageInfo_Closure)
                 (const FirmwareImageInfo *message,
                  void *closure_data);
typedef void (*VendorTlv_Closure)
                 (const VendorTlv *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tlv_index__descriptor;
extern const ProtobufCMessageDescriptor device_id__descriptor;
extern const ProtobufCMessageDescriptor session_id__descriptor;
extern const ProtobufCMessageDescriptor description_request__descriptor;
extern const ProtobufCMessageDescriptor report_subscribe__descriptor;
extern const ProtobufCMessageDescriptor cgmssettings__descriptor;
extern const ProtobufCMessageDescriptor cgmsstatus__descriptor;
extern const ProtobufCMessageDescriptor cgmsnotification__descriptor;
extern const ProtobufCMessageDescriptor cgmsstats__descriptor;
extern const ProtobufCMessageDescriptor group_assign__descriptor;
extern const ProtobufCMessageDescriptor group_match__descriptor;
extern const ProtobufCMessageDescriptor group_info__descriptor;
extern const ProtobufCMessageDescriptor signature_validity__descriptor;
extern const ProtobufCMessageDescriptor signature__descriptor;
extern const ProtobufCMessageDescriptor signature_settings__descriptor;
extern const ProtobufCMessageDescriptor hardware_desc__descriptor;
extern const ProtobufCMessageDescriptor interface_desc__descriptor;
extern const ProtobufCMessageDescriptor ipaddress__descriptor;
extern const ProtobufCMessageDescriptor iproute__descriptor;
extern const ProtobufCMessageDescriptor current_time__descriptor;
extern const ProtobufCMessageDescriptor uptime__descriptor;
extern const ProtobufCMessageDescriptor interface_metrics__descriptor;
extern const ProtobufCMessageDescriptor iproute_rplmetrics__descriptor;
extern const ProtobufCMessageDescriptor wpanstatus__descriptor;
extern const ProtobufCMessageDescriptor rplinstance__descriptor;
extern const ProtobufCMessageDescriptor hardware_info__descriptor;
extern const ProtobufCMessageDescriptor transfer_request__descriptor;
extern const ProtobufCMessageDescriptor image_block__descriptor;
extern const ProtobufCMessageDescriptor load_request__descriptor;
extern const ProtobufCMessageDescriptor cancel_load_request__descriptor;
extern const ProtobufCMessageDescriptor set_backup_request__descriptor;
extern const ProtobufCMessageDescriptor transfer_response__descriptor;
extern const ProtobufCMessageDescriptor load_response__descriptor;
extern const ProtobufCMessageDescriptor cancel_load_response__descriptor;
extern const ProtobufCMessageDescriptor set_backup_response__descriptor;
extern const ProtobufCMessageDescriptor firmware_image_info__descriptor;
extern const ProtobufCMessageDescriptor vendor_tlv__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CsmpTlvs_2eproto__INCLUDED */
